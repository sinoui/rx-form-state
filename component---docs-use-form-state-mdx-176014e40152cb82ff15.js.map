{"version":3,"sources":["webpack:///../docs/useFormState.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useFormState","FormStateContext","Field","formState","Provider","value","as","name","required","isMDXComponent"],"mappings":"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","file":"component---docs-use-form-state-mdx-176014e40152cb82ff15.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/workspace/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useFormState, FormStateContext, Field } from '../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useformstate\"\n    }}>{`useFormState`}</h1>\n    <p><inlineCode parentName=\"p\">{`useFormState`}</inlineCode>{`是用来创建表单状态管理器对象的自定义 React Hook。通过表单状态管理器对象，我们可以管理与表单相关的状态，包括：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`表单值`}</li>\n      <li parentName=\"ul\">{`表单校验状态`}</li>\n      <li parentName=\"ul\">{`表单提交状态`}</li>\n    </ul>\n    <p>{`引用：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useFormState } from '@sinoui/rx-form-state';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"使用方式\"\n    }}>{`使用方式`}</h2>\n    <p>{`注意：因为`}<inlineCode parentName=\"p\">{`useFormState`}</inlineCode>{`是 React Hook，所以必须在 React 函数组件中使用。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValue = {}; // 表单默认值\n  const options = {}; // 创建表单状态管理器的配置\n  const formState = useFormState(initialValue, options);\n}\n`}</code></pre>\n    <p>{`通过`}<inlineCode parentName=\"p\">{`useFormState()`}</inlineCode>{`产生的`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`往往会与`}<a parentName=\"p\" {...{\n        \"href\": \"api-form-state-context-component\"\n      }}>{`FormStateContext`}</a>{`结合在一起使用，将`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`通过 React 上下文的方式共享到子组件：`}</p>\n    <p>{`（注意：`}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`@sinoui/sinoui-components-forms`}</a>{`的`}<a parentName=\"p\" {...{\n        \"href\": \"sinoui-components-forms-form\"\n      }}>{`Form`}</a>{`组件已经集成了`}<a parentName=\"p\" {...{\n        \"href\": \"api-form-state-context-component\"\n      }}>{`FormStateContext.Provider`}</a>{`。）`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { useFormState, FormStateContext, Field } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValue = {}; // 表单默认值\n  const options = {}; // 创建表单状态管理器的配置\n  const formState = useFormState(initialValue, options);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <label>\n          姓名:\n          <Field as=\"input\" name=\"userName\" required />\n        </label>\n        <label>\n          年龄：\n          <Field as=\"input\" name=\"age\" required />\n        </label>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`看一下演示效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>\\n            姓名：\\n            <Field as=\\\"input\\\" name=\\\"userName\\\" required />\\n          </label>\\n        </div>\\n        <div>\\n          <label>\\n            年龄：\\n            <Field as=\\\"input\\\" name=\\\"age\\\" required />\\n          </label>\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormStateContext,\n      Field,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>\n              姓名：\n              <Field as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n            </label>\n          </div>\n          <div>\n            <label>\n              年龄：\n              <Field as=\"input\" name=\"age\" required mdxType=\"Field\" />\n            </label>\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"方法参数\"\n    }}>{`方法参数`}</h2>\n    <p><inlineCode parentName=\"p\">{`useFormState`}</inlineCode>{`方法声明如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`useFormState<T>(initialValues: T = {}, options?: FormStateOptions<T>): FormState;\n`}</code></pre>\n    <p>{`方法的第一个参数`}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`是初始的表单值，可以不指定，默认为`}<inlineCode parentName=\"p\">{`{}`}</inlineCode>{`。方法的第二个参数`}<inlineCode parentName=\"p\">{`options`}</inlineCode>{`是表单状态管理器的配置，有如下配置选项：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`配置项`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`validate`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`(value:any,values: T) => FormStateErrors`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`undefined\\``}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onSubmit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\\`(values: T, formState: FormState) => Promise`}{`<`}{`any`}{`>`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`void\\``}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`relys`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`RelyRule<T>[]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`指定表单域值关联逻辑。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`enableReinitialize`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否监听`}<inlineCode parentName=\"td\">{`initialValues`}</inlineCode>{`值变更，如果发生变更，则重新应用新的表单初始值。默认为`}<inlineCode parentName=\"td\">{`true`}</inlineCode>{`，表示启用。`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><inlineCode parentName=\"p\">{`relys`}</inlineCode>{`是用来指定表单域值关联计算的规则，例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const relys = [\n  // 规则1：A = B + C\n  [\n    'B',\n    'C',\n    (draft) => {\n      draft.A = draft.B + draft.C;\n    },\n  ],\n  // 规则2：E = D\n  [\n    'D',\n    (draft) => {\n      draft.E = draft.D;\n    },\n  ],\n  // 规则3：F = A * E\n  [\n    'A',\n    'E',\n    (draft) => {\n      draft.F = draft.A * draft.E;\n    },\n  ],\n];\n`}</code></pre>\n    <p>{`也可以通过 `}<inlineCode parentName=\"p\">{`addRelyRule`}</inlineCode>{` 动态添加值关联规则，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const formState = useFormState();\n\nuseEffect(() => {\n  const remove = formState.addRelyRule(['B', 'C'], (draft) => {\n    draft.A = draft.B + draft.C;\n  });\n\n  return remove; // 返回移除校验规则的函数\n}, [formState]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"表单状态管理器对象formstate\"\n    }}>{`表单状态管理器对象`}<inlineCode parentName=\"h2\">{`formState`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`useFormState()`}</inlineCode>{`返回`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`表单状态管理器对象。通过`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`，可以获取和更新表单状态。`}</p>\n    <h2 {...{\n      \"id\": \"获取表单状态\"\n    }}>{`获取表单状态`}</h2>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{`有以下属性可用来获取不同的表单状态：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`属性名`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`values`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`T`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单值。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`errors`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`FormStateErrors`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单同步验证错误状态。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isTouched`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`FormStateTouched`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单域被操作状态。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`asyncErrors`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`FormStateErrors`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单异步校验错误状态。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isPending`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`FormStatePending`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`执行异步校验的过程状态。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isSubmitting`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单提交中状态。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isFormPending`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单是否有进行中的异步校验。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isValid`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`表单验证是否通过。`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`通过这些属性即可获取到表单值、校验错误等状态。`}</p>\n    <p>{`如果你的组件关注表单状态的变更，也就是说当成组件状态使用，那么需要用到下面提供的获取表单状态的 React Hooks：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`hook`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"api-use-form-submitting\"\n            }}>{`useFormSubmitting`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(formState?: FormState) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`获取表单提交中状态的 hook。在表单提交时特别有用。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"api-use-form-select\"\n            }}>{`useFormSelect`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`<T, M>(formState: FormState<T>, selector: (FormStateModel: FormStateModel<T>) => M): M`}</inlineCode>{` 或者 `}<inlineCode parentName=\"td\">{`<T, M>(selector: (FormStateModel: FormStateModel<T>) => M): M`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`提取表单状态的 hook。`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`下面通过两个例子来看一看如何使用这两个 hooks。`}</p>\n    <h3 {...{\n      \"id\": \"例子-1：在表单中使用的提交按钮\"\n    }}>{`例子 1：在表单中使用的提交按钮`}</h3>\n    <p>{`在表单中使用的提交按钮，我们定义为`}<inlineCode parentName=\"p\">{`SubmitButton`}</inlineCode>{`组件。在组件内部可以获取到`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`上下文，所以无需将`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`传递给上面介绍的两个 hook。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function SubmitButton() {\n  const isSubmitting = useFormSubmitting();\n  const submitEnabled = useFormSelect(\n    (formStateModel) =>\n      !formStateModel.isFormPending &&\n      formStateModel.isValid &&\n      !formStateModel.isSubmitting,\n  );\n\n  return (\n    <button type=\"submit\" disabled={!submitEnabled}>\n      {isSubmitting ? '正在提交表单...' : '提交'}\n    </button>\n  );\n}\n`}</code></pre>\n    <p>{`使用方式类似如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const formState = useFormState();\n\n<Form formState={formState}>\n  <SubmitButton />\n</Form>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"例子-2：在表单外部使用的提交按钮\"\n    }}>{`例子 2：在表单外部使用的提交按钮`}</h3>\n    <p>{`在表单外部使用提交按钮，那么这个按钮无法从上下文中获取到`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`，则需要通过属性传递给`}<inlineCode parentName=\"p\">{`SubmitButton`}</inlineCode>{`。代码如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function SubmitButton({ formState }: { formState: FormState }) {\n  const isSubmitting = useFormSubmitting(formState);\n  const submitEnabled = useFormSelect(\n    formState,\n    (formStateModel) =>\n      !formStateModel.isFormPending &&\n      formStateModel.isValid &&\n      !formStateModel.isSubmitting,\n  );\n\n  return (\n    <button type=\"submit\" disabled={!submitEnabled} onClick={formState.submit}>\n      {isSubmitting ? '正在提交表单...' : '提交'}\n    </button>\n  );\n}\n`}</code></pre>\n    <p>{`使用方式类似如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const formState = useFormState();\n\n<div>\n  <Form formState={formState}></Form>\n  <SubmitButton formState={formState} />\n</div>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"获取表单域状态\"\n    }}>{`获取表单域状态`}</h2>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{`提供了两个方法，用来直接获取表单域状态的：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`方法`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`getFieldState`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string): FieldStateModel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`获取一个表单域状态的方法。`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`获取到的状态有：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface FieldStateModel {\n  /**\n   * 表单域名称\n   */\n  name: string;\n  /**\n   * 表单域值\n   */\n  value: any;\n  /**\n   * 表单错误\n   */\n  error?: string | null;\n  /**\n   * 表单异步错误\n   */\n  asyncError?: string | null;\n  /**\n   * 被操作状态\n   */\n  isTouched: boolean;\n  /**\n   * 异步校验过程状态\n   */\n  isPending: boolean;\n}\n`}</code></pre>\n    <p>{`我们还可以通过以下自定义 hook，在组件内获取表单域状态：`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"api-use-field-state\"\n        }}>{`useFieldState`}</a>{` - 获取单个表单域的状态`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"api-use-field-value\"\n        }}>{`useFieldValue`}</a>{` - 获取单个表单域的值`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"api-use-field-error\"\n        }}>{`useFieldError`}</a>{` - 获取表单域的验证错误`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"api-use-field-touched\"\n        }}>{`useFieldTouhed`}</a>{` - 获取表单域是否被点击过的状态`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"更新表单状态\"\n    }}>{`更新表单状态`}</h2>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{`提供了一些方法，用来更新表单状态：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`方法`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`updateState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(producer: (draft: FormStateModel<T>) => void): FormStateModel<T>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`更新表单状态。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setValues`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(values: T) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`更新表单值。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setInitialValues`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(initialValues: T) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`更新表单初始值。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`validate`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`() => boolean`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`验证表单。返回验证结果。如果有校验错误，则返回`}<inlineCode parentName=\"td\">{`false`}</inlineCode>{`，否则返回`}<inlineCode parentName=\"td\">{`true`}</inlineCode>{`。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setErrors`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(errors: FormStateErrors) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单校验错误`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setTouched`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(touched: FormStateTouched) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置所有表单域的点击状态`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setAsyncErrors`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(asyncErrors: FormStateErrors) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置异步校验错误`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setPending`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(isPending: FormStatePending): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单异步校验的过程状态`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`reset`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(defaultValues?: T): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`重置表单`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`submit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(event?: React.FormEvent<HTMLFormElement>): Promise<any>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`提交表单`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setSubmitting`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(submiting: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置提交中状态`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`特别说明一下`}<inlineCode parentName=\"p\">{`updateState()`}</inlineCode>{`方法。此方法可以设置表单状态的任何地方，采用的是`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/immerjs/immer\"\n      }}>{`immer`}</a>{`的方法更新表单状态，例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`formState.updateState((draft) => {\n  draft.values.A = '1';\n  draft.touched.A = true;\n  draft.errors.A = '必须大于2';\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"更新表单域状态\"\n    }}>{`更新表单域状态`}</h2>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{`提供了一些直接操作表单域状态的方法：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`方法`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setFieldState`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string, producer: (draft: FieldStateModel) => void): FieldStateModel`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单域状态`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setFieldValue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string, value: any): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单域的值。`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`validateField`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`校验表单域`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`validateFields`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(...fieldNames: string[]): Promise<boolean>`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`同时验证多个表单域`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setFieldTouched`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string, isTouched?: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单域的被操作状态`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setFieldError`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string, error?: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单域错误`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setFieldPending`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string, isPending: boolean): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单域的异步校验过程状态`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`setFieldAsyncError`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string, asyncError?: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`设置表单域的异步错误`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`blur`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`处理表单域失去焦点事件`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`除了这些方法，还可以使用`}<a parentName=\"p\" {...{\n        \"href\": \"api-use-field\"\n      }}>{`useField`}</a>{`来获取一些更新表单域的方法。`}</p>\n    <h2 {...{\n      \"id\": \"表单域配置\"\n    }}>{`表单域配置`}</h2>\n    <p>{`通过表单域配置，可以为表单域指定校验、异步校验、值关联规则。`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`提供了更新表单域配置的方法：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`方法`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`addField`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(field: FieldConfig): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`添加表单域配置`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`removeField`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(fieldName: string): void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`删除表单域配置`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`表单域配置类型`}<inlineCode parentName=\"p\">{`FielConfig`}</inlineCode>{`如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface FieldConfig {\n  /**\n   * 表单域名称\n   */\n  name: string;\n  /**\n   * 表单域校验方法\n   *\n   * @param {*} value 表单域值\n   * @param {*} values 表单值\n   * @returns {(string | undefined | null)}\n   */\n  validate(value: any, values: any): string | undefined | null;\n  /**\n   * 表单域异步校验方法\n   *\n   * @param {*} value 表单域值\n   * @param {*} values 表单值\n   *\n   * @returns {(string | undefined | null | Promise<string | undefined>} 返回校验结果\n   */\n  asyncValidate?: (\n    value: any,\n    values: any,\n  ) => Promise<string | undefined> | undefined;\n  /**\n   * 关联字段名\n   */\n  relyFields?: string[];\n  /**\n   * 值关联计算方法\n   */\n  relyFn?: (values: any) => any;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}