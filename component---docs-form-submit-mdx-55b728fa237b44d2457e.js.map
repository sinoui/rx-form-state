{"version":3,"sources":["webpack:///../docs/form-submit.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useFormState","useFormSubmitting","FormStateContext","Field","formState","undefined","onSubmit","values","Promise","resolve","setTimeout","alert","isSubmitting","Provider","value","event","preventDefault","submit","as","name","required","type","disabled","onClick","reject","userName","sex","catch","errors","console","log","setAsyncErrors","isMDXComponent"],"mappings":"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","file":"component---docs-form-submit-mdx-55b728fa237b44d2457e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/personal/githubrepo/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useFormState, useFormSubmitting, FormStateContext, Field } from '../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"提交表单\"\n    }}>{`提交表单`}</h1>\n    <p>{`当用户填写完表单后，就需要将表单数据提交到后端服务以存储表单数据。提交过程分成三部分：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`在提交表单前，我们应该先对表单数据进行校验，验证表单是否填写完整了。`}</li>\n      <li parentName=\"ul\">{`在提交表单过程中，应该出现提交中的提示语。而且需要防止用户重复提交。`}</li>\n      <li parentName=\"ul\">{`提交完成后，如果提交失败，且后端返回了表单的错误信息，我们需要在表单域上显示表单错误。`}</li>\n    </ul>\n    <p>{`接下来，我们看看如何使用`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sinoui/rx-form-state\"\n      }}>{`@sinoui/rx-form-state`}</a>{`来完成表单提交。`}</p>\n    <h2 {...{\n      \"id\": \"提交表单-1\"\n    }}>{`提交表单`}</h2>\n    <p>{`要想提交表单，我们需要准备两个步骤：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`在`}<inlineCode parentName=\"li\">{`useFormState`}</inlineCode>{`的配置参数中添加`}<inlineCode parentName=\"li\">{`onSubmit`}</inlineCode>{`，定义向后端提交表单值的逻辑。`}</li>\n      <li parentName=\"ul\">{`在`}<inlineCode parentName=\"li\">{`<form>`}</inlineCode>{`标签中添加一个`}<inlineCode parentName=\"li\">{`type=\"submit\"`}</inlineCode>{`的表单提交按钮。当点击这个按钮时，就会执行表单提交动作。`}</li>\n    </ul>\n    <p>{`如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useFormState, Field, FormStateContext } from '@sinoui/rx-form-state';\n\nconst onSubmit = (values) => {\n  // 使用setTimeout模拟向后端提交表单。\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n      alert('提交表单成功');\n    }, 1000);\n  });\n};\n\nfunction FormDemo() {\n  const formState = useFormState(undefined, {\n    onSubmit,\n  });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          formState.submit();\n        }}\n      >\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" name=\"userName\" required />\n        </div>\n        <div>\n          <label>性别</label>\n          <Field as=\"select\" name=\"sex\" required>\n            <option value=\"\">请选择</option>\n            <option value=\"女\">女</option>\n            <option value=\"男\">男</option>\n          </Field>\n        </div>\n        <button type=\"submit\">提交表单</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`可以从`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`中获取`}<inlineCode parentName=\"p\">{`isSubmitting`}</inlineCode>{`状态，表示是否正在提交表单。我们可以通过这个状态控制“提交表单”按钮的可用性以及提交中提示语，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useFormSubmitting } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const isSubmitting = useFormSubmitting(formState);\n\n  return (\n    <button type=\"submit\" disabled={isSubmitting}>\n      {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n    </button>\n  );\n}\n`}</code></pre>\n    <p>{`演示效果如下：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const onSubmit = values => {\\n    return new Promise(resolve => {\\n      setTimeout(() => {\\n        resolve()\\n        alert(\\'提交表单成功\\')\\n      }, 1000)\\n    })\\n  }\\n  const formState = useFormState(undefined, {\\n    onSubmit,\\n  })\\n  const isSubmitting = useFormSubmitting(formState)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form\\n        onSubmit={event => {\\n          event.preventDefault()\\n          formState.submit()\\n        }}\\n      >\\n        <div>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" name=\\\"userName\\\" required />\\n        </div>\\n        <div>\\n          <label>性别</label>\\n          <Field as=\\\"select\\\" name=\\\"sex\\\" required>\\n            <option value=\\\"\\\">请选择</option>\\n            <option value=\\\"女\\\">女</option>\\n            <option value=\\\"男\\\">男</option>\\n          </Field>\\n        </div>\\n        <button type=\\\"submit\\\" disabled={isSubmitting}>\\n          {isSubmitting ? \\'正在提交表单，请稍等...\\' : \\'提交表单\\'}\\n        </button>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      useFormSubmitting,\n      FormStateContext,\n      Field,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const onSubmit = values => {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              alert('提交表单成功');\n            }, 1000);\n          });\n        };\n\n        const formState = useFormState(undefined, {\n          onSubmit\n        });\n        const isSubmitting = useFormSubmitting(formState);\n        return <FormStateContext.Provider value={formState}>\n        <form onSubmit={event => {\n            event.preventDefault();\n            formState.submit();\n          }}>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n          </div>\n          <div>\n            <label>性别</label>\n            <Field as=\"select\" name=\"sex\" required mdxType=\"Field\">\n              <option value=\"\">请选择</option>\n              <option value=\"女\">女</option>\n              <option value=\"男\">男</option>\n            </Field>\n          </div>\n          <button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n          </button>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"提交按钮在form标签外部\"\n    }}>{`提交按钮在`}<inlineCode parentName=\"h2\">{`<form>`}</inlineCode>{`标签外部`}</h2>\n    <p>{`如果提交表单的按钮在`}<inlineCode parentName=\"p\">{`<form />`}</inlineCode>{`标签外部，我们可以在点击提交表单按钮时，调用`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`submit`}</inlineCode>{`方法，来完成表单提交。以上一章节的例子为例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function FormDemo() {\n  return (\n    <div>\n      <form>...</form>\n      <button type=\"button\" disabled={isSubmitting} onClick={formState.submit}>\n        {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n      </button>\n    </div>\n  );\n}\n`}</code></pre>\n    <p>{`演示效果如下：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const onSubmit = values => {\\n    return new Promise(resolve => {\\n      setTimeout(() => {\\n        resolve()\\n        alert(\\'提交表单成功\\')\\n      }, 1000)\\n    })\\n  }\\n  const formState = useFormState(undefined, {\\n    onSubmit,\\n  })\\n  const isSubmitting = useFormSubmitting(formState)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <div>\\n        <form>\\n          <div>\\n            <label>用户名</label>\\n            <Field as=\\\"input\\\" name=\\\"userName\\\" required />\\n          </div>\\n          <div>\\n            <label>性别</label>\\n            <Field as=\\\"select\\\" name=\\\"sex\\\" required>\\n              <option value=\\\"\\\">请选择</option>\\n              <option value=\\\"女\\\">女</option>\\n              <option value=\\\"男\\\">男</option>\\n            </Field>\\n          </div>\\n        </form>\\n        <button disabled={isSubmitting} onClick={formState.submit}>\\n          {isSubmitting ? \\'正在提交表单，请稍等...\\' : \\'提交表单\\'}\\n        </button>\\n      </div>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      useFormSubmitting,\n      FormStateContext,\n      Field,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const onSubmit = values => {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n              alert('提交表单成功');\n            }, 1000);\n          });\n        };\n\n        const formState = useFormState(undefined, {\n          onSubmit\n        });\n        const isSubmitting = useFormSubmitting(formState);\n        return <FormStateContext.Provider value={formState}>\n        <div>\n          <form>\n            <div>\n              <label>用户名</label>\n              <Field as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n            </div>\n            <div>\n              <label>性别</label>\n              <Field as=\"select\" name=\"sex\" required mdxType=\"Field\">\n                <option value=\"\">请选择</option>\n                <option value=\"女\">女</option>\n                <option value=\"男\">男</option>\n              </Field>\n            </div>\n          </form>\n          <button disabled={isSubmitting} onClick={formState.submit}>\n            {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n          </button>\n        </div>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"应用表单提交返回的验证错误\"\n    }}>{`应用表单提交返回的验证错误`}</h2>\n    <p>{`如果表单提交失败，后台返回了表单验证错误，我们是需要将这些表单验证错误在表单上显示出来的。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function submitForm(values) {\n  // 使用setTimeout模拟向后端提交表单。\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject({\n        userName: '用户名已存在',\n        sex: '性别不匹配',\n      });\n      alert('提交表单失败');\n    }, 1000);\n  });\n}\n\nconst onSubmit = async (values, formState) => {\n  try {\n    await submitForm(values);\n  } catch (errors) {\n    console.log(errors); // { userName: '用户名已存在', sex: '性别不匹配' }\n    formState.setAsyncErrors(errors);\n    throw errors;\n  }\n};\n\nfunction FormDemo() {\n  const fromState = useFormState(undefined, { onSubmit });\n}\n`}</code></pre>\n    <p>{`演示效果如下：`}</p>\n    <Playground __position={2} __code={'() => {\\n  function submitForm(values) {\\n    // 使用setTimeout模拟向后端提交表单。\\n    return new Promise((resolve, reject) => {\\n      setTimeout(() => {\\n        reject({\\n          userName: \\'用户名已存在\\',\\n          sex: \\'性别不匹配\\',\\n        })\\n        alert(\\'提交表单失败\\')\\n      }, 1000)\\n    })\\n  }\\n  const onSubmit = (values, formState) => {\\n    return submitForm(values).catch(errors => {\\n      console.log(errors) // { userName: \\'用户名已存在\\', sex: \\'性别不匹配\\' }\\n      formState.setAsyncErrors(errors)\\n      throw errors\\n    })\\n  }\\n  const formState = useFormState(undefined, {\\n    onSubmit,\\n  })\\n  const isSubmitting = useFormSubmitting(formState)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <div>\\n        <form>\\n          <div>\\n            <label>用户名</label>\\n            <Field as=\\\"input\\\" name=\\\"userName\\\" required />\\n          </div>\\n          <div>\\n            <label>性别</label>\\n            <Field as=\\\"select\\\" name=\\\"sex\\\" required>\\n              <option value=\\\"\\\">请选择</option>\\n              <option value=\\\"女\\\">女</option>\\n              <option value=\\\"男\\\">男</option>\\n            </Field>\\n          </div>\\n        </form>\\n        <button disabled={isSubmitting} onClick={formState.submit}>\\n          {isSubmitting ? \\'正在提交表单，请稍等...\\' : \\'提交表单\\'}\\n        </button>\\n      </div>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      useFormSubmitting,\n      FormStateContext,\n      Field,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        function submitForm(values) {\n          // 使用setTimeout模拟向后端提交表单。\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              reject({\n                userName: '用户名已存在',\n                sex: '性别不匹配'\n              });\n              alert('提交表单失败');\n            }, 1000);\n          });\n        }\n\n        const onSubmit = (values, formState) => {\n          return submitForm(values).catch(errors => {\n            console.log(errors); // { userName: '用户名已存在', sex: '性别不匹配' }\n\n            formState.setAsyncErrors(errors);\n            throw errors;\n          });\n        };\n\n        const formState = useFormState(undefined, {\n          onSubmit\n        });\n        const isSubmitting = useFormSubmitting(formState);\n        return <FormStateContext.Provider value={formState}>\n        <div>\n          <form>\n            <div>\n              <label>用户名</label>\n              <Field as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n            </div>\n            <div>\n              <label>性别</label>\n              <Field as=\"select\" name=\"sex\" required mdxType=\"Field\">\n                <option value=\"\">请选择</option>\n                <option value=\"女\">女</option>\n                <option value=\"男\">男</option>\n              </Field>\n            </div>\n          </form>\n          <button disabled={isSubmitting} onClick={formState.submit}>\n            {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n          </button>\n        </div>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"消息提示\"\n    }}>{`消息提示`}</h2>\n    <p>{`可以用 `}<a parentName=\"p\" {...{\n        \"href\": \"https://sinoui.github.io/message/\"\n      }}>{`@sinoui/message`}</a>{`，添加一些必要的表单提交提示。范例：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import message from '@sinoui/message';\n\nfunction FormDemo() {\n  const formState = useFormState(initialValues, { onSubmit });\n\n  const handleFormSubmit = async () => {\n    const hide = message.loading('正在提交表单', 0);\n    try {\n      await form.submit();\n      message.success('表单提交成功');\n    } catch (e) {\n      if (e && e.message === '表单校验失败') {\n        // 表单校验出错\n        message.error('表单填写不完整');\n      } else {\n        message.error('表单提交失败');\n      }\n    } finally {\n      hide(); // 隐藏 “正在提交表单” 提示\n    }\n  };\n\n  return (\n    <form formState={formState}>\n      ...\n      <button onClick={handleFormSubmit}>提交表单</button>\n    </form>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}