{"version":3,"sources":["webpack:///../docs/form-initial-values-and-reset.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useFormState","FormStateContext","Field","formState","userName","note","password","age","Provider","value","as","name","type","onClick","reset","isMDXComponent"],"mappings":"4RAQaA,G,UAAe,S,wNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,6BAAGC,WAAW,KAAQ,CACrB,KAAQ,uBACP,0BAAYA,WAAW,KAAvB,yCAFL,yBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yNAYL,8CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wPAUL,8BAAa,0BAAYA,WAAW,KAAvB,gBAAb,MAA4E,0BAAYA,WAAW,KAAvB,iBAA5E,oDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mQAWL,0BAAS,0BAAYA,WAAW,KAAvB,YAAT,OAAqE,0BAAYA,WAAW,KAAvB,qBAArE,aAAgJ,0BAAYA,WAAW,KAAvB,aAAhJ,UAAgN,0BAAYA,WAAW,KAAvB,iBAAhN,WAAqR,0BAAYA,WAAW,KAAvB,iBAArR,0BAAyW,0BAAYA,WAAW,KAAvB,YAAzW,qBACA,mCAAkB,0BAAYA,WAAW,KAAvB,iBAAlB,QACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kQAaL,4BAAW,0BAAYA,WAAW,KAAvB,iBAAX,KACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sSAiBL,yBAAQ,0BAAYA,WAAW,KAAvB,6BAAR,iBACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gYAcL,iBAAQ,CACN,GAAM,QADR,QAGA,0BAAS,0BAAYA,WAAW,KAAvB,mBAAT,cACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wwBA6BL,8BACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,utBAA4uBC,SAAO,GACpxBL,QACAH,kBACAS,eACAC,iBACAC,qBACAC,WANoxB,gBAOpxBZ,IAPoxB,EAQpxBH,eARoxB,GASnxBO,QAAQ,eACZ,WACK,IAMMS,EAAYH,YANI,CACpBI,SAAU,KACVC,KAAM,UACNC,SAAU,GACVC,IAAK,KAGP,OAAO,YAAC,IAAiBC,SAAlB,CAA2BC,MAAON,GACzC,gCACE,wBACE,gCACA,YAAC,IAAD,CAAOO,GAAG,QAAQC,KAAK,WAAWjB,QAAQ,UAC1C,+BACA,YAAC,IAAD,CAAOgB,GAAG,QAAQC,KAAK,WAAWC,KAAK,WAAWlB,QAAQ,UAC1D,+BACA,YAAC,IAAD,CAAOgB,GAAG,QAAQC,KAAK,MAAMC,KAAK,SAASlB,QAAQ,UACnD,+BACA,YAAC,IAAD,CAAOgB,GAAG,QAAQC,KAAK,OAAOjB,QAAQ,WAExC,sBAAQmB,QAAS,kBAAMV,EAAUW,UAAjC,iB,sNASVvB,EAAWwB,gBAAiB","file":"component---docs-form-initial-values-and-reset-mdx-5cd39fb791ed96af0ece.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/workspace/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useFormState, FormStateContext, Field } from '../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"表单初始值与重置\"\n    }}>{`表单初始值与重置`}</h1>\n    <h2 {...{\n      \"id\": \"设置表单初始值\"\n    }}>{`设置表单初始值`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"api-use-form-state\"\n      }}><inlineCode parentName=\"a\">{`useFormState(initialValues, options)`}</inlineCode></a>{`的第一个参数是表单初始值，它的基本用法是：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = {\n    userName: '张三',\n    favs: ['篮球', '足球'],\n  };\n  const formState = useFormState(initialValues);\n}\n`}</code></pre>\n    <p>{`有时应用需要去服务器端加载表单数据，例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import useRestItemApi from '@sinoui/use-rest-item-api';\nimport { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const restState = useRestItemApi('/users', '1');\n  const formState = useFormState(restState.data);\n}\n`}</code></pre>\n    <p>{`默认情况下，`}<inlineCode parentName=\"p\">{`useFormState`}</inlineCode>{`会监听`}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`参数的变化，使用深比较的方式判断有变化后，会重新应用表单初始值，所以，下面的代码可能会出现问题：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = {\n    day: new Date(), // 😔🔴 每次FormDemo重绘时，day总是一个新的值。\n  };\n  const formState = useFormState(initialValues); // 😔🔴 在FormDemo重绘时，会出现表单值丢失情况\n}\n`}</code></pre>\n    <p>{`每次`}<inlineCode parentName=\"p\">{`FormDemo`}</inlineCode>{`重绘时，`}<inlineCode parentName=\"p\">{`initialValues.day`}</inlineCode>{`都是一个新的值，这样`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`总是会应用新的`}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`，将表单值设置为`}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`。可能我们已经在表单中填写了一些数据，但是由于`}<inlineCode parentName=\"p\">{`FormDemo`}</inlineCode>{`发生重绘，会导致已填写的数据丢失。`}</p>\n    <p>{`这种情况我们可以不监听`}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`的变化：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = {\n    day: new Date(),\n  };\n  const formState = useFormState(initialValues, {\n    enableReinitialize: false, // ✅ 不监听initialValues的变化\n  });\n}\n`}</code></pre>\n    <p>{`或者缓存`}<inlineCode parentName=\"p\">{`initialValues`}</inlineCode>{`：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { useMemo } from 'react';\nimport { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  // ✅ 缓存initialValues\n  const initialValues = useMemo(\n    () => ({\n      day: new Date(),\n    }),\n    [],\n  );\n\n  const formState = useFormState(initialValues);\n}\n`}</code></pre>\n    <p>{`与`}<inlineCode parentName=\"p\">{`@sinoui/use-rest-item-api`}</inlineCode>{`结合使用时，可以这样处理：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import useRestItemApi from '@sinoui/use-rest-item-api';\nimport { useFormState } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const userId = '1';\n  const initialValues = {\n    day: new Date(),\n  };\n  const restState = useRestItemApi('/users', userId, initialValues); // ✅ useRestItemApi不会监听initialValues的变化\n  const formState = useFormState(restState.data);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"表单重置\"\n    }}>{`表单重置`}</h2>\n    <p>{`调用`}<inlineCode parentName=\"p\">{`formState.reset`}</inlineCode>{`方法重置表单。例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { useFormState, FormStateContext, Field } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '张三', note: '这是初始化数据' };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <label>用户名</label>\n        <Field as=\"input\" name=\"userName\" />\n\n        <label>密码</label>\n        <Field as=\"input\" name=\"password\" type=\"password\" />\n\n        <label>年龄</label>\n        <Field as=\"input\" name=\"age\" type=\"number\" />\n\n        <label>备注</label>\n        <Field as=\"input\" name=\"note\" />\n      </form>\n      <button onClick={() => formState.reset()}>重置</button>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const initialValues = {\\n    userName: \\'张三\\',\\n    note: \\'这是初始化数据\\',\\n    password: \\'\\',\\n    age: \\'\\',\\n  }\\n  const formState = useFormState(initialValues)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <>\\n        <form>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n          <label>密码</label>\\n          <Field as=\\\"input\\\" name=\\\"password\\\" type=\\\"password\\\" />\\n          <label>年龄</label>\\n          <Field as=\\\"input\\\" name=\\\"age\\\" type=\\\"number\\\" />\\n          <label>备注</label>\\n          <Field as=\\\"input\\\" name=\\\"note\\\" />\\n        </form>\\n        <button onClick={() => formState.reset()}>重置</button>\\n      </>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormStateContext,\n      Field,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialValues = {\n          userName: '张三',\n          note: '这是初始化数据',\n          password: '',\n          age: ''\n        };\n        const formState = useFormState(initialValues);\n        return <FormStateContext.Provider value={formState}>\n        <>\n          <form>\n            <label>用户名</label>\n            <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n            <label>密码</label>\n            <Field as=\"input\" name=\"password\" type=\"password\" mdxType=\"Field\" />\n            <label>年龄</label>\n            <Field as=\"input\" name=\"age\" type=\"number\" mdxType=\"Field\" />\n            <label>备注</label>\n            <Field as=\"input\" name=\"note\" mdxType=\"Field\" />\n          </form>\n          <button onClick={() => formState.reset()}>重置</button>\n        </>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}