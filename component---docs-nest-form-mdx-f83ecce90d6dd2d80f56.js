(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"0ND9":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return v})),t.d(n,"default",(function(){return O}));var a=t("Fcif"),o=t("+I+c"),r=(t("mXGw"),t("/FXl")),l=t("TjRS"),i=t("ZFoC"),s=t("9va6"),m=t("jzJw"),d=t("xIpy"),u=t("JDL0"),p=t("hh+d"),b=t("IUht"),c=t("LDBJ"),F=t("D5XZ"),f=t("zAYS"),v=(t("aD51"),{});void 0!==v&&v&&v===Object(v)&&Object.isExtensible(v)&&!v.hasOwnProperty("__filemeta")&&Object.defineProperty(v,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/nest-form.mdx"}});var j={_frontmatter:v},y=l.a;function O(e){var n,t,O,x,h,N,C,g=e.components,S=Object(o.a)(e,["components"]);return Object(r.b)(y,Object(a.a)({},j,S,{components:g,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"嵌套表单"},"嵌套表单"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/sinoui/rx-form-state"}),"@sinoui/rx-form-state"),"的表单域",Object(r.b)("inlineCode",{parentName:"p"},"name"),"属性支持\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://jsonpath.com/"}),"JsonPath"),"形式，以支持嵌套表单的场景。如："),Object(r.b)("p",null,"表单值数据："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "address": {\n    "city": "北京",\n    "street": "海淀"\n  }\n}\n')),Object(r.b)("p",null,"地址相关的两个表单项："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<Field name="address.city" />\n<Field name="address.street" />\n')),Object(r.b)("p",null,"列表类型嵌套表单的数据结构："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "contacts": [\n    {\n      "userName": "张三",\n      "telephone": "13443565678"\n    },\n    {\n      "userName": "李四",\n      "telephone": "13312341234"\n    }\n  ]\n}\n')),Object(r.b)("p",null,"我们可以这样定义表单域："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'第一个联系人：\n<Field name="contacts[0].userName" />\n<Field name="contacts[0].telephone" />\n\n第二个联系人：\n<Field name="contacts[1].userName" />\n<Field name="contacts[1].telephone" />\n')),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/sinoui/rx-form-state"}),"@sinoui/rx-form-state"),"\n还提供了",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"api-use-field-array"}),"useFieldArray"),"和",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"api-field-array-component"}),"FieldArray"),"辅助嵌套表单的开发。"),Object(r.b)("p",null,"本篇教程我们主要以以下三种嵌套表单为例，阐述不同场景嵌套表单的实现方式："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"简单的嵌套表单 -- 填写地址"),Object(r.b)("li",{parentName:"ul"},"列表类型的嵌套 -- 添加联系人"),Object(r.b)("li",{parentName:"ul"},"深层嵌套 -- 添加常用联系人")),Object(r.b)("h2",{id:"简单的嵌套表单"},"简单的嵌套表单"),Object(r.b)("p",null,"简单的嵌套表单不需要过多复杂的处理，只需要指定正确的",Object(r.b)("inlineCode",{parentName:"p"},"name"),"值即可。"),Object(r.b)("p",null,"基本用法："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport {\n  useFormState,\n  FormStateContext,\n  Field,\n  FormValueMonitor,\n} from \'@sinoui/rx-form-state\';\n\nfunction FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form formState={formState}>\n        <div>\n          <label>用户名</label>\n          <Field as="input" name="userName" required />\n        </div>\n        <label>地址：</label>\n        <div>\n          <label>城市</label>\n          <Field as="input" name="address.city" required />\n        </div>\n        <div>\n          <label>区/县</label>\n          <Field as="input" name="address.region" required />\n        </div>\n        <div>\n          <label>街道</label>\n          <Field as="input" name="address.street" required />\n        </div>\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:0,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form formState={formState}>\n        <div>\n          <label>用户名</label>\n          <Field as="input" name="userName" required />\n        </div>\n        <label>地址：</label>\n        <div>\n          <label>城市</label>\n          <Field as="input" name="address.city" required />\n        </div>\n        <div>\n          <label>区/县</label>\n          <Field as="input" name="address.region" required />\n        </div>\n        <div>\n          <label>街道</label>\n          <Field as="input" name="address.street" required />\n        </div>\n        <FormValueMonitor>\n          {values => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(n={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},n.DefaultLayout=l.a,n._frontmatter=v,n),mdxType:"Playground"},(function(){var e=Object(d.a)();return Object(r.b)(b.a.Provider,{value:e},Object(r.b)("form",{formState:e},Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(p.a,{as:"input",name:"userName",required:!0,mdxType:"Field"})),Object(r.b)("label",null,"地址："),Object(r.b)("div",null,Object(r.b)("label",null,"城市"),Object(r.b)(p.a,{as:"input",name:"address.city",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"区/县"),Object(r.b)(p.a,{as:"input",name:"address.region",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"街道"),Object(r.b)(p.a,{as:"input",name:"address.street",required:!0,mdxType:"Field"})),Object(r.b)(u.a,{mdxType:"FormValueMonitor"},(function(e){return Object(r.b)("div",null,"表单值：",JSON.stringify(e,void 0,2))}))))})),Object(r.b)("h2",{id:"列表类型的嵌套表单"},"列表类型的嵌套表单"),Object(r.b)("p",null,"可以借助",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"use-field-array"}),"useFieldArray"),"实现列表类型的嵌套表单，我们以添加联系方式为例来说明列表类型的嵌套列表应该如何实现："),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"TelephoneForm.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport { Field, useFieldArray } from '@sinoui/rx-form-state';\n\nconst types = ['家庭', '工作', 'iPhone', '手机', '主要', '工作传真', '其他'];\n\nfunction TelephoneForm() {\n  const {\n    getFieldName: name, // 获取表单域名称\n    items, // 列表数据项\n    insert, // 插入一条新的数据\n    remove, // 移除一条数据\n    push, // 在数据项最后新增一条数据\n    swap, // 移动数据项\n  } = useFieldArray('telephones');\n\n  const handlePush = () => {\n    if (items.length < types.length) {\n      const idx = types.findIndex(\n        (type) => items.findIndex((item: any) => item.type === type) === -1,\n      );\n      if (idx !== -1) {\n        push({ type: types[idx] });\n      }\n    } else {\n      push({ type: '其他' });\n    }\n  };\n\n  const handleInsert = (index: number) => {\n    if (items.length < types.length) {\n      const idx = types.findIndex(\n        (type) => items.findIndex((item: any) => item.type === type) === -1,\n      );\n      if (idx !== -1) {\n        insert(index + 1, { type: types[idx] });\n      }\n    } else {\n      insert(index + 1, { type: '其他' });\n    }\n  };\n\n  return (\n    <div style={{ paddingTop: 16, paddingBottom: 16 }}>\n      <label> 添加电话</label>\n      {items.map((_telephone, index) => (\n        <div\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n          style={{\n            display: 'flex',\n            padding: 8,\n            border: '1px solid green',\n            marginTop: 8,\n            marginBottom: 8,\n          }}\n        >\n          <div>\n            <Field\n              name={name(index, 'type')}\n              as=\"input\"\n              required\n              placeholder=\"类型\"\n            />\n          </div>\n          <div>\n            <Field\n              name={name(index, 'telephone')}\n              as=\"input\"\n              required\n              maxLength={11}\n              minLength={4}\n              placeholder=\"电话\"\n            />\n          </div>\n          <button type=\"button\" onClick={() => handleInsert(index)}>\n            +\n          </button>\n          <button type=\"button\" onClick={() => remove(index)}>\n            -\n          </button>\n          {index > 0 && (\n            <button type=\"button\" onClick={() => swap(index, index - 1)}>\n              ⬆️\n            </button>\n          )}\n          {index < items.length - 1 && (\n            <button type=\"button\" onClick={() => swap(index, index + 1)}>\n              ⬇️\n            </button>\n          )}\n        </div>\n      ))}\n      <button type=\"button\" onClick={handlePush}>\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default TelephoneForm;\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"FormDemo.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport { Field, useFormState, FormStateContext } from \'@sinoui/rx-form-state\';\nimport TelephoneForm from \'./TelephoneForm\';\n\nfunction FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>姓氏</label>\n          <Field as="input" type="text" name="firstName" required />\n        </div>\n        <div>\n          <label>名字</label>\n          <Field as="input" type="text" name="lastName" required />\n        </div>\n        <div>\n          <label>公司</label>\n          <Field as="input" type="text" name="company" />\n        </div>\n\n        <TelephoneForm />\n        <div>\n          <label>备注</label>\n          <Field as="input" name="note" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(r.b)("p",null,"上述示例的数据结构为："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "firstName": "",\n  "lastName": "",\n  "company": "",\n  "telephones": [{ "type": "", "telephone": "" }],\n  "note": ""\n}\n')),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:1,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>姓氏</label>\n          <Field as="input" type="text" name="firstName" required />\n        </div>\n        <div>\n          <label>名字</label>\n          <Field as="input" type="text" name="lastName" required />\n        </div>\n        <div>\n          <label>公司</label>\n          <Field as="input" type="text" name="company" />\n        </div>\n        <TelephoneForm />\n        <div>\n          <label>备注</label>\n          <Field as="input" name="note" />\n        </div>\n        <FormValueMonitor>\n          {values => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(t={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},t.DefaultLayout=l.a,t._frontmatter=v,t),mdxType:"Playground"},(function(){var e=Object(d.a)();return Object(r.b)(b.a.Provider,{value:e},Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"姓氏"),Object(r.b)(p.a,{as:"input",type:"text",name:"firstName",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"名字"),Object(r.b)(p.a,{as:"input",type:"text",name:"lastName",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"公司"),Object(r.b)(p.a,{as:"input",type:"text",name:"company",mdxType:"Field"})),Object(r.b)(c.a,{mdxType:"TelephoneForm"}),Object(r.b)("div",null,Object(r.b)("label",null,"备注"),Object(r.b)(p.a,{as:"input",name:"note",mdxType:"Field"})),Object(r.b)(u.a,{mdxType:"FormValueMonitor"},(function(e){return Object(r.b)("div",null,"表单值：",JSON.stringify(e,void 0,2))}))))})),Object(r.b)("h2",{id:"深层嵌套"},"深层嵌套"),Object(r.b)("p",null,"深层嵌套表单的实现过程中，我们可能需要多次使用",Object(r.b)("inlineCode",{parentName:"p"},"useFieldArray"),"，此时需要特别注意参数的指定。"),Object(r.b)("p",null,"添加常用联系人的数据结构如下："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "userName": "",\n  "topContacts": [\n    {\n      "userName": "",\n      "telephones": [{ "type": "", "telephone": "138xxxx0015" }]\n    }\n  ]\n}\n')),Object(r.b)("p",null,"分析上述数据结构，我们要维护常用联系人以及联系人的联系方式，需要创建两层嵌套表单，分别是：联系人表单（TopContactsForm）和联系方式表单（TelephoneForm）。\n我们可以使用两次",Object(r.b)("inlineCode",{parentName:"p"},"useFieldArray"),"来实现。具体如下："),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"TopContactsForm.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport { useFieldArray, Field } from '../../src';\nimport TelephoneForm from './TelephoneForm';\n\nfunction FormInner(props: any) {\n  const { name, index, insert, remove, swap, itemsLength } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: 8,\n        border: '1px solid green',\n        margin: 8,\n      }}\n    >\n      <div>\n        <Field\n          name={name(index, 'userName')}\n          as=\"input\"\n          required\n          placeholder=\"姓名\"\n        />\n      </div>\n      <TelephoneForm parentName={`topContacts[${index}]`} />\n      <button type=\"button\" onClick={() => insert(index + 1, {})}>\n        +\n      </button>\n      <button type=\"button\" onClick={() => remove(index)}>\n        -\n      </button>\n      {index > 0 && (\n        <button type=\"button\" onClick={() => swap(index, index - 1)}>\n          ⬆️\n        </button>\n      )}\n      {index < itemsLength - 1 && (\n        <button type=\"button\" onClick={() => swap(index, index + 1)}>\n          ⬇️\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst Item = React.memo(FormInner);\n\nfunction TopContactsForm() {\n  const {\n    getFieldName: name,\n    items,\n    insert,\n    remove,\n    push,\n    swap,\n  } = useFieldArray('topContacts');\n\n  return (\n    <div style={{ paddingTop: 16, paddingBottom: 16 }}>\n      <label>添加常用联系人</label>\n      {items.map((_telephone, index) => (\n        <Item\n          key={index}\n          index={index}\n          name={name}\n          itemsLength={items.length}\n          insert={insert}\n          remove={remove}\n          swap={swap}\n        />\n      ))}\n      <button type=\"button\" onClick={() => push({})}>\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default TopContactsForm;\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"TelephoneForm.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { useFieldArray, Field } from '../../src';\n\nconst types = ['家庭', '工作', 'iPhone', '手机', '主要', '工作传真', '其他'];\n\nfunction FormInner(props: any) {\n  const { name, index, handleInsert, remove, swap, itemsLength } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: 8,\n        border: '1px solid green',\n        marginTop: 8,\n        marginBottom: 8,\n      }}\n    >\n      <div>\n        <Field\n          name={name(index, 'type')}\n          as=\"input\"\n          required\n          placeholder=\"类型\"\n        />\n      </div>\n      <div>\n        <Field\n          name={name(index, 'telephone')}\n          as=\"input\"\n          required\n          maxLength={11}\n          minLength={4}\n          placeholder=\"电话\"\n        />\n      </div>\n      <button type=\"button\" onClick={() => handleInsert(index)}>\n        +\n      </button>\n      <button type=\"button\" onClick={() => remove(index)}>\n        -\n      </button>\n      {index > 0 && (\n        <button type=\"button\" onClick={() => swap(index, index - 1)}>\n          ⬆️\n        </button>\n      )}\n      {index < itemsLength - 1 && (\n        <button type=\"button\" onClick={() => swap(index, index + 1)}>\n          ⬇️\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst Item = React.memo(FormInner);\n\nfunction TelephoneForm(props: { parentName?: string }) {\n  const { parentName } = props;\n\n  const {\n    getFieldName: name,\n    items,\n    insert,\n    remove,\n    push,\n    swap,\n  } = useFieldArray(parentName ? `${parentName}.telephones` : 'telephones');\n  const itemsRef = useRef(items);\n  useEffect(() => {\n    itemsRef.current = items;\n  }, [items]);\n\n  const handlePush = () => {\n    if (items.length < types.length) {\n      const idx = types.findIndex(\n        (type) => items.findIndex((item: any) => item.type === type) === -1,\n      );\n      if (idx !== -1) {\n        push({ type: types[idx] });\n      }\n    } else {\n      push({ type: '其他' });\n    }\n  };\n\n  const handleInsert = useCallback(\n    (index: number) => {\n      if (itemsRef.current.length < types.length) {\n        const idx = types.findIndex(\n          (type) =>\n            itemsRef.current.findIndex((item: any) => item.type === type) ===\n            -1,\n        );\n        if (idx !== -1) {\n          insert(index + 1, { type: types[idx] });\n        }\n      } else {\n        insert(index + 1, { type: '其他' });\n      }\n    },\n    [insert],\n  );\n\n  return (\n    <div style={{ paddingTop: 4, paddingBottom: 4 }}>\n      <label> 添加电话</label>\n      {items.map((_telephone, index) => (\n        <Item\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n          index={index}\n          itemsLength={items.length}\n          name={name}\n          remove={remove}\n          swap={swap}\n          handleInsert={handleInsert}\n        />\n      ))}\n      <button type=\"button\" onClick={() => handlePush()}>\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default TelephoneForm;\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"FormDemo.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport { Field, useFormState, FormStateContext } from '@sinoui/rx-form-state';\nimport TopContactsForm from './TopContactsForm';\n\nfunction FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" required />\n        </div>\n        <TopContactsForm />\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:2,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as="input" type="text" name="userName" required />\n        </div>\n        <TopContactsForm />\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(O={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},O.DefaultLayout=l.a,O._frontmatter=v,O),mdxType:"Playground"},(function(){var e=Object(d.a)();return Object(r.b)(b.a.Provider,{value:e},Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(p.a,{as:"input",type:"text",name:"userName",required:!0,mdxType:"Field"})),Object(r.b)(F.a,{mdxType:"TopContactsForm"})))})),Object(r.b)("h2",{id:"嵌套表单的性能优化建议"},"嵌套表单的性能优化建议"),Object(r.b)("p",null,"对于复杂的嵌套表单，我们要特别注意其性能优化。比如列表类型的嵌套表单，我们在改变其中一条记录的数据时，理想状态是只有当前的这条数据记录相关组件重新渲染。\n此时，我们只需要把相关组件使用",Object(r.b)("inlineCode",{parentName:"p"},"React.memo"),"渲染即可。具体使用可参照",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#%E6%B7%B1%E5%B1%82%E5%B5%8C%E5%A5%97"}),"深层嵌套"),"。\n更多关于组件性能优化方式可参考",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://sinoui.github.io/sinoui-guide/docs/react-performance-optimization"}),"React 组件性能优化"),"。"),Object(r.b)("h2",{id:"嵌套表单的全局校验"},"嵌套表单的全局校验"),Object(r.b)("p",null,"简单嵌套表单的全局校验只需要注意其返回值的数据结构，具体事例可参考",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"form-validate#%E5%B5%8C%E5%A5%97%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C"}),"嵌套表单校验"),";\n列表类型的嵌套表单在做全局校验时，建议拆分校验函数，而非在一个校验函数中写大段的逻辑处理，例如上述",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#%E6%B7%B1%E5%B1%82%E5%B5%8C%E5%A5%97"}),"深层嵌套表单"),"的全局校验函数我们使用下面的方式定义："),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"FormDemo.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"/**\n * 联系方式校验\n */\nfunction validateTelephone(value) {\n  const errors = {};\n  if (value.telephone && value.telephone.length < 4) {\n    errors.telephone = '不能少于4位';\n  }\n\n  return errors;\n}\n\n/**\n * 常用联系人校验\n */\nfunction validateTopContact(topContact) {\n  const errors = {};\n  if (!topContact.userName) {\n    errors.userName = '必填';\n  }\n\n  if (topContact.telephones) {\n    errors.telephones = topContact.telephones.map(validateTelephone);\n  }\n\n  return errors;\n}\n\nfunction validate(values) {\n  let errors = {};\n  if (!values.userName) {\n    errors.userName = '必填';\n  }\n\n  if (values.topContacts) {\n    errors.topContacts = values.topContacts.map(validateTopContact);\n  }\n  return errors;\n}\n\nfunction FormDemo() {\n  const formState = useFormState({}, { validate });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:3,__code:"() => {\n  /**\n   * 联系方式校验\n   */\n  function validateTelephone(value) {\n    const errors = {}\n    if (value.telephone && value.telephone.length < 4) {\n      errors.telephone = '不能少于4位'\n    }\n    return errors\n  }\n  /**\n   * 常用联系人校验\n   */\n  function validateTopContact(topContact) {\n    const errors = {}\n    if (!topContact.userName) {\n      errors.userName = '必填'\n    }\n    if (topContact.telephones) {\n      errors.telephones = topContact.telephones.map(validateTelephone)\n    }\n    return errors\n  }\n  function validate(values) {\n    let errors = {}\n    if (!values.userName) {\n      errors.userName = '必填'\n    }\n    if (values.topContacts) {\n      errors.topContacts = values.topContacts.map(validateTopContact)\n    }\n    return errors\n  }\n  const formState = useFormState({}, { validate })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {values => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}",__scope:(x={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},x.DefaultLayout=l.a,x._frontmatter=v,x),mdxType:"Playground"},(function(){function e(e){var n={};return e.telephone&&e.telephone.length<4&&(n.telephone="不能少于4位"),n}function n(n){var t={};return n.userName||(t.userName="必填"),n.telephones&&(t.telephones=n.telephones.map(e)),t}var t=Object(d.a)({},{validate:function(e){var t={};return e.userName||(t.userName="必填"),e.topContacts&&(t.topContacts=e.topContacts.map(n)),t}});return Object(r.b)(b.a.Provider,{value:t},Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(p.a,{as:"input",type:"text",name:"userName",mdxType:"Field"})),Object(r.b)(F.a,{mdxType:"TopContactsForm"}),Object(r.b)(u.a,{mdxType:"FormValueMonitor"},(function(e){return Object(r.b)("div",null,"表单值：",JSON.stringify(e,void 0,2))}))))})),Object(r.b)("h2",{id:"表单域值关联"},"表单域值关联"),Object(r.b)("p",null,"嵌套表单的表单域值关联，跟普通表单的表单域值关联处理方式基本一致。\n只是依赖函数在处理值的时候需要特别注意一下，例如调整上述的联系人示例，\n有三个表单域，分别是：姓氏、名字和姓名，它们之间存在一种关系：",Object(r.b)("inlineCode",{parentName:"p"},"姓名 = 姓氏 + 名字"),"。"),Object(r.b)("p",null,"数据结构："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "topContacts": [\n    {\n      "firstName": "张",\n      "lastName": "三",\n      "userName": "张三"\n    }\n  ]\n}\n')),Object(r.b)("p",null,"表单域的定义如下："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<Field\n    name={name(index, \'firstName\')}\n    as="input"\n    required\n    placeholder="姓氏"\n/>\n<Field\n    name={name(index, \'lastName\')}\n    as="input"\n    required\n    placeholder="名字"\n/>\n<Field\n    name={name(index, \'userName\')}\n    as="input"\n    required\n    placeholder="姓名"\n    readOnly\n    relyFields={[name(index, \'firstName\'), name(index, \'lastName\')]}\n    relyFn={(values) => relyFn(values, index)}\n/>\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"relyFn"),"函数的定义如下："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"/**\n * 计算值的依赖函数  这里需要也别注意值处理，如果层次特别深的话，建议使用lodash的get方法\n */\nconst relyFn = (values, index) => {\n  if (values.topContacts) {\n    const { firstName = '', lastName = '' } = values.topContacts[index];\n    return `${firstName}${lastName}`;\n  }\n  return '';\n};\n")),Object(r.b)("p",null,"完整示例如下："),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"TopContactsForm.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  Field,\n  useFieldArray,\n  useFormState,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\nimport TelephoneForm from './TelephoneForm';\n/**\n * 计算值的依赖函数  这里需要也别注意值处理，如果层次特别深的话，建议使用lodash的get方法\n */\nconst relyFn = (values, index) => {\n  if (values.topContacts) {\n    const { firstName = '', lastName = '' } = values.topContacts[index];\n    return `${firstName}${lastName}`;\n  }\n  return '';\n};\n\nfunction FormInner(props: any) {\n  const { name, index, insert, remove, swap, itemsLength } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: 8,\n        border: '1px solid green',\n        margin: 8,\n      }}\n    >\n      <div>\n        <Field\n          name={name(index, 'firstName')}\n          as=\"input\"\n          required\n          placeholder=\"姓氏\"\n        />\n      </div>\n      <div>\n        <Field\n          name={name(index, 'lastName')}\n          as=\"input\"\n          required\n          placeholder=\"名字\"\n        />\n      </div>\n      <div>\n        <Field\n          name={name(index, 'userName')}\n          as=\"input\"\n          required\n          placeholder=\"姓名\"\n          readOnly\n          relyFields={[name(index, 'firstName'), name(index, 'lastName')]}\n          relyFn={(values) => relyFn(values, index)}\n        />\n      </div>\n      <TelephoneForm parentName={`topContacts[${index}]`} />\n      <button type=\"button\" onClick={() => insert(index + 1, {})}>\n        +\n      </button>\n      <button type=\"button\" onClick={() => remove(index)}>\n        -\n      </button>\n      {index > 0 && (\n        <button type=\"button\" onClick={() => swap(index, index - 1)}>\n          ⬆️\n        </button>\n      )}\n      {index < itemsLength - 1 && (\n        <button type=\"button\" onClick={() => swap(index, index + 1)}>\n          ⬇️\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst Item = React.memo(FormInner);\n\nfunction TopContactsForm() {\n  const {\n    getFieldName: name,\n    items,\n    insert,\n    remove,\n    push,\n    swap,\n  } = useFieldArray('topContacts');\n\n  return (\n    <div style={{ paddingTop: 16, paddingBottom: 16 }}>\n      <label>添加常用联系人</label>\n      {items.map((_telephone, index) => (\n        <Item\n          key={index}\n          index={index}\n          name={name}\n          itemsLength={items.length}\n          insert={insert}\n          remove={remove}\n          swap={swap}\n        />\n      ))}\n      <button type=\"button\" onClick={() => push({})}>\n        +\n      </button>\n    </div>\n  );\n}\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"FormDemo.tsx")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'function FormDemo() {\n  const formState = useFormState();\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as="input" name="userName" required />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:4,__code:"() => <RelyFieldsInNestForm />",__scope:(h={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},h.DefaultLayout=l.a,h._frontmatter=v,h),mdxType:"Playground"},(function(){return Object(r.b)(f.a,{mdxType:"RelyFieldsInNestForm"})})),Object(r.b)("h2",{id:"全局值关联"},"全局值关联"),Object(r.b)("p",null,"这里我们依旧采用深层嵌套表单的示例来说明全局值关联的使用。"),Object(r.b)("p",null,"假设现在我们需要存储一个字段来表示常用联系人总数，此时我们需要定义一个全局依赖规则，并将这个依赖规则作为",Object(r.b)("inlineCode",{parentName:"p"},"useFormState"),"的第二个参数对象的",Object(r.b)("inlineCode",{parentName:"p"},"relys"),"属性。具体实现如下："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'const countRely = [\n  \'topContacts\',\n  (draft) => {\n    if (draft.topContacts) {\n      draft.count = draft.topContacts.length;\n    }\n  },\n];\n\nfunction FormDemo() {\n  const formState = useFormState({}, { relys: [countRely] });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as="input" type="text" name="userName" />\n        </div>\n        <TopContactsForm />\n        <div>\n          <label>常用联系人总数</label>\n          <Field\n            as="input"\n            type="number"\n            name="count"\n            placeholder="常用联系人总数"\n          />\n        </div>\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:5,__code:'() => {\n  const countRely = [\n    \'topContacts\',\n    draft => {\n      if (draft.topContacts) {\n        draft.count = draft.topContacts.length\n      }\n    },\n  ]\n  const formState = useFormState({}, { relys: [countRely] })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as="input" type="text" name="userName" />\n        </div>\n        <TopContactsForm />\n        <div>\n          <label>常用联系人总数</label>\n          <Field\n            as="input"\n            type="number"\n            name="count"\n            placeholder="常用联系人总数"\n          />\n        </div>\n        <FormValueMonitor>\n          {values => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(N={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},N.DefaultLayout=l.a,N._frontmatter=v,N),mdxType:"Playground"},(function(){var e=Object(d.a)({},{relys:[["topContacts",function(e){e.topContacts&&(e.count=e.topContacts.length)}]]});return Object(r.b)(b.a.Provider,{value:e},Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(p.a,{as:"input",type:"text",name:"userName",mdxType:"Field"})),Object(r.b)(F.a,{mdxType:"TopContactsForm"}),Object(r.b)("div",null,Object(r.b)("label",null,"常用联系人总数"),Object(r.b)(p.a,{as:"input",type:"number",name:"count",placeholder:"常用联系人总数",mdxType:"Field"})),Object(r.b)(u.a,{mdxType:"FormValueMonitor"},(function(e){return Object(r.b)("div",null,"表单值：",JSON.stringify(e,void 0,2))}))))})),Object(r.b)("p",null,"如果上述示例中的联系人总数不需要存储，只是用来展示统计结果的话，我们不需要使用全局值关联，只需要借助",Object(r.b)("inlineCode",{parentName:"p"},"FormValueMonitor"),"即可实现，具体如下："),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'function FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as="input" type="text" name="userName" />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {(values) => (\n            <div>\n              常用联系人总数：{values.topContacts && values.topContacts.length}\n            </div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(r.b)("p",null,"运行效果："),Object(r.b)(i.c,{__position:6,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as="input" type="text" name="userName" />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {values => (\n            <div>\n              常用联系人总数：\n              {values.topContacts && values.topContacts.length}\n            </div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(C={props:S,DefaultLayout:l.a,Playground:i.c,set:s.set,useFieldArray:m.a,useFormState:d.a,FormValueMonitor:u.a,Field:p.a,FormStateContext:b.a,TelephoneForm:c.a,TopContactsForm:F.a,RelyFieldsInNestForm:f.a},C.DefaultLayout=l.a,C._frontmatter=v,C),mdxType:"Playground"},(function(){var e=Object(d.a)();return Object(r.b)(b.a.Provider,{value:e},Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(p.a,{as:"input",type:"text",name:"userName",mdxType:"Field"})),Object(r.b)(F.a,{mdxType:"TopContactsForm"}),Object(r.b)(u.a,{mdxType:"FormValueMonitor"},(function(e){return Object(r.b)("div",null,"常用联系人总数：",e.topContacts&&e.topContacts.length)}))))})))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/nest-form.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-nest-form-mdx-f83ecce90d6dd2d80f56.js.map