(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{hiX8:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return j})),n.d(t,"default",(function(){return F}));var a=n("Fcif"),r=n("+I+c"),l=n("/FXl"),s=n("TjRS"),o=n("ZFoC"),i=n("9va6"),d=n("hh+d"),u=n("xIpy"),b=n("o8UE"),m=n("2u7k"),c=n("IUht"),p=n("DZsI"),j=(n("aD51"),{});void 0!==j&&j&&j===Object(j)&&Object.isExtensible(j)&&!j.hasOwnProperty("__filemeta")&&Object.defineProperty(j,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/form-validate.mdx"}});var O={_frontmatter:j},v=s.a;function F(e){var t,n,F,f,N,y,h=e.components,S=Object(r.a)(e,["components"]);return Object(l.b)(v,Object(a.a)({},O,S,{components:h,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"表单校验"},"表单校验"),Object(l.b)("p",null,"表单校验是 ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/sinoui/rx-form-state"}),"@sinoui/rx-form-state")," 一个很重要的功能。这里我们将从以下几个方面来探讨表单校验的使用："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"内置校验(针对表单域)"),Object(l.b)("li",{parentName:"ul"},"自定义表单域校验",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"同步校验"),Object(l.b)("li",{parentName:"ul"},"异步校验"))),Object(l.b)("li",{parentName:"ul"},"全局表单校验(表单级别校验)"),Object(l.b)("li",{parentName:"ul"},"嵌套表单校验"),Object(l.b)("li",{parentName:"ul"},"自定义校验错误")),Object(l.b)("p",null,"表单校验的时机为："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"表单域值发生改变时"),Object(l.b)("li",{parentName:"ul"},"表单域失去焦点时"),Object(l.b)("li",{parentName:"ul"},"表单提交之前")),Object(l.b)("p",null,"注意：表单域的异步校验只会在表单域同步校验没有错误时才触发。"),Object(l.b)("p",null,"表单校验的显示时机为："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"表单校验错误存在"),Object(l.b)("li",{parentName:"ul"},"表单域的",Object(l.b)("inlineCode",{parentName:"li"},"isTouched"),"状态为",Object(l.b)("inlineCode",{parentName:"li"},"true"))),Object(l.b)("p",null,"一般同时满足上述两个条件，页面才能正确显示表单校验信息。"),Object(l.b)("h2",{id:"内置校验"},"内置校验"),Object(l.b)("p",null,"针对表单域的校验，我们内部实现了一些校验规则，在使用时只需指定对应的属性即可。内置校验主要有以下几个："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"required 必填校验"),Object(l.b)("li",{parentName:"ul"},"trimRequired 去掉首尾空白符之后的必填校验"),Object(l.b)("li",{parentName:"ul"},"min 指定数值，做最小值校验"),Object(l.b)("li",{parentName:"ul"},"max 指定数值，做最大值校验"),Object(l.b)("li",{parentName:"ul"},"maxLength 指定数值，做字符串最大长度校验"),Object(l.b)("li",{parentName:"ul"},"minLength 指定数值，做字符串最小长度校验"),Object(l.b)("li",{parentName:"ul"},"pattern 正则校验"),Object(l.b)("li",{parentName:"ul"},"patternErrorMessage 正则校验失败的错误信息")),Object(l.b)("p",null,"使用方式："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<Field as="input" name="userName" required />\n<Field as="input" name="password" type="password" minLength={8}/>\n<Field as="input" name="telephone" type="number" maxLength={11}/>\n<Field as="input" name="email" pattern="[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+" patternErrorMessage="邮箱格式不正确"/>\n')),Object(l.b)("p",null,"Field 组件不负责展现表单校验错误，我们可以封装一个组件，用来呈现指定表单项的校验错误信息："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport { useFieldTouched, useFieldError } from '@sinoui/rx-form-state';\n\nfunction FieldError({ name }) {\n  const isTouched = useFieldTouched(name);\n  const errorMessage = useFieldError(name);\n\n  return isTouched && errorMessage ? (\n    <div style={{ color: 'red' }}>{errorMessage}</div>\n  ) : null;\n}\n")),Object(l.b)("p",null,"运行效果："),Object(l.b)(o.c,{__position:0,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label htmlFor="userName">用户名</label>\n          <Field id="userName" as="input" name="userName" required />\n          <FieldError name="userName" />\n        </div>\n        <div>\n          <label>密码</label>\n          <Field as="input" name="password" type="password" minLength={8} />\n          <FieldError name="password" />\n        </div>\n        <div>\n          <label>联系方式</label>\n          <Field as="input" name="telephone" type="number" maxLength={11} />\n          <FieldError name="telephone" />\n        </div>\n        <div>\n          <label>邮箱</label>\n          <Field\n            as="input"\n            name="email"\n            pattern="[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+"\n            patternErrorMessage="邮箱格式不正确"\n          />\n          <FieldError name="email" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(t={props:S,DefaultLayout:s.a,Playground:o.c,set:i.set,Field:d.a,useFormState:u.a,useFieldTouched:b.a,useFieldError:m.a,FormStateContext:c.a,FieldError:p.a},t.DefaultLayout=s.a,t._frontmatter=j,t),mdxType:"Playground"},(function(){var e=Object(u.a)();return Object(l.b)(c.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"userName"},"用户名"),Object(l.b)(d.a,{id:"userName",as:"input",name:"userName",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"userName",mdxType:"FieldError"})),Object(l.b)("div",null,Object(l.b)("label",null,"密码"),Object(l.b)(d.a,{as:"input",name:"password",type:"password",minLength:8,mdxType:"Field"}),Object(l.b)(p.a,{name:"password",mdxType:"FieldError"})),Object(l.b)("div",null,Object(l.b)("label",null,"联系方式"),Object(l.b)(d.a,{as:"input",name:"telephone",type:"number",maxLength:11,mdxType:"Field"}),Object(l.b)(p.a,{name:"telephone",mdxType:"FieldError"})),Object(l.b)("div",null,Object(l.b)("label",null,"邮箱"),Object(l.b)(d.a,{as:"input",name:"email",pattern:"[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+",patternErrorMessage:"邮箱格式不正确",mdxType:"Field"}),Object(l.b)(p.a,{name:"email",mdxType:"FieldError"}))))})),Object(l.b)("h2",{id:"表单域校验"},"表单域校验"),Object(l.b)("h3",{id:"自定义表单域校验同步校验"},"自定义表单域校验(同步校验)"),Object(l.b)("p",null,"当内置校验不满足需求时，我们可以给",Object(l.b)("inlineCode",{parentName:"p"},"Field"),"组件指定一个",Object(l.b)("inlineCode",{parentName:"p"},"validate"),"属性做表单域同步校验。例如："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'function validate(value, values) {\n  if (value) {\n    if (/^\\d/.test(value)) {\n      return \'不能以数字开头\';\n    }\n  }\n}\n\n<Field as="input" name="userName" required validate={validate} />;\n')),Object(l.b)("p",null,"运行效果："),Object(l.b)(o.c,{__position:1,__code:'() => {\n  function validate(value, values) {\n    if (value) {\n      if (/^\\d/.test(value)) {\n        return \'不能以数字开头\'\n      }\n    }\n  }\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label htmlFor="userName">用户名</label>\n          <Field\n            id="userName"\n            as="input"\n            name="userName"\n            required\n            validate={validate}\n          />\n          <FieldError name="userName" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(n={props:S,DefaultLayout:s.a,Playground:o.c,set:i.set,Field:d.a,useFormState:u.a,useFieldTouched:b.a,useFieldError:m.a,FormStateContext:c.a,FieldError:p.a},n.DefaultLayout=s.a,n._frontmatter=j,n),mdxType:"Playground"},(function(){var e=Object(u.a)();return Object(l.b)(c.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"userName"},"用户名"),Object(l.b)(d.a,{id:"userName",as:"input",name:"userName",required:!0,validate:function(e,t){if(e&&/^\d/.test(e))return"不能以数字开头"},mdxType:"Field"}),Object(l.b)(p.a,{name:"userName",mdxType:"FieldError"}))))})),Object(l.b)("h3",{id:"自定义表单域校验（异步校验）"},"自定义表单域校验（异步校验）"),Object(l.b)("p",null,"异步校验只适用于表单域校验，在表单校验时，同一个表单域只有同步校验没有错误时才会触发该表单域的异步校验。\n自定义表单域的异步校验只需要给",Object(l.b)("inlineCode",{parentName:"p"},"Field"),"组件指定",Object(l.b)("inlineCode",{parentName:"p"},"asyncValidate"),"属性即可。例如："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import http from \'@sinoui/http\';\n\nfunction asyncValidateFn(value, values) {\n  return http.get(`/test/validate/`, { params: { value, values } });\n}\n\n<Field as="input" name="userName" required asyncValidate={asyncValidateFn} />;\n')),Object(l.b)("p",null,"运行效果(使用 setTimeout 模拟异步校验)："),Object(l.b)(o.c,{__position:2,__code:'() => {\n  function asyncValidateFn(value, values) {\n    return new Promise(resolve => {\n      setTimeout(() => resolve(\'该用户已被注销\'), 500)\n    })\n  }\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field\n            as="input"\n            name="userName"\n            required\n            asyncValidate={asyncValidateFn}\n          />\n          <FieldError name="userName" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(F={props:S,DefaultLayout:s.a,Playground:o.c,set:i.set,Field:d.a,useFormState:u.a,useFieldTouched:b.a,useFieldError:m.a,FormStateContext:c.a,FieldError:p.a},F.DefaultLayout=s.a,F._frontmatter=j,F),mdxType:"Playground"},(function(){var e=Object(u.a)();return Object(l.b)(c.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("div",null,Object(l.b)("label",null,"用户名"),Object(l.b)(d.a,{as:"input",name:"userName",required:!0,asyncValidate:function(e,t){return new Promise((function(e){setTimeout((function(){return e("该用户已被注销")}),500)}))},mdxType:"Field"}),Object(l.b)(p.a,{name:"userName",mdxType:"FieldError"}))))})),Object(l.b)("h2",{id:"全局校验表单级别的校验"},"全局校验(表单级别的校验)"),Object(l.b)("p",null,"所谓全局校验，就是在表单级别对整个表单进行校验。我们只需要在使用",Object(l.b)("inlineCode",{parentName:"p"},"useFormState"),"时，给第二个参数对象指定",Object(l.b)("inlineCode",{parentName:"p"},"validate"),"方法即可。"),Object(l.b)("p",null,"使用方式："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport {\n  useFormState,\n  FormItem,\n  Label,\n  Field,\n  FormStateErrors,\n} from \'@sinoui/rx-form-state\';\n\nfunction validate(values) {\n  let error: FormStateErrors = {};\n\n  if (values.userName) {\n    if (/^\\d/.test(values.userName)) {\n      error[\'userName\'] = \'不能以数字开头\';\n    }\n  }\n\n  if (values.password && values.password.length < 8) {\n    error[\'password\'] = \'至少为8个字符\';\n  }\n  return error;\n}\n\nfunction FormDemo() {\n  const formState = useFormState({}, { validate });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label htmlFor="userName">用户名</label>\n          <Field id="userName" as="input" name="userName" required />\n          <FieldError name="userName" />\n        </div>\n        <div>\n          <label htmlFor="password">密码</label>\n          <Field\n            id="password"\n            as="input"\n            name="password"\n            type="password"\n            required\n          />\n          <FieldError name="password" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(l.b)("p",null,"运行效果："),Object(l.b)(o.c,{__position:3,__code:'() => {\n  function validate(values) {\n    let error = {}\n    if (values.userName) {\n      if (/^\\d/.test(values.userName)) {\n        error[\'userName\'] = \'不能以数字开头\'\n      }\n    }\n    if (values.password && values.password.length < 8) {\n      error[\'password\'] = \'至少为8个字符\'\n    }\n    return error\n  }\n  const formState = useFormState({}, { validate })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label htmlFor="userName">用户名</label>\n          <Field id="userName" as="input" name="userName" required />\n          <FieldError name="userName" />\n        </div>\n        <div>\n          <label htmlFor="password">密码</label>\n          <Field\n            id="password"\n            as="input"\n            name="password"\n            type="password"\n            required\n          />\n          <FieldError name="password" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(f={props:S,DefaultLayout:s.a,Playground:o.c,set:i.set,Field:d.a,useFormState:u.a,useFieldTouched:b.a,useFieldError:m.a,FormStateContext:c.a,FieldError:p.a},f.DefaultLayout=s.a,f._frontmatter=j,f),mdxType:"Playground"},(function(){var e=Object(u.a)({},{validate:function(e){var t={};return e.userName&&/^\d/.test(e.userName)&&(t.userName="不能以数字开头"),e.password&&e.password.length<8&&(t.password="至少为8个字符"),t}});return Object(l.b)(c.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"userName"},"用户名"),Object(l.b)(d.a,{id:"userName",as:"input",name:"userName",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"userName",mdxType:"FieldError"})),Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"password"},"密码"),Object(l.b)(d.a,{id:"password",as:"input",name:"password",type:"password",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"password",mdxType:"FieldError"}))))})),Object(l.b)("h2",{id:"嵌套表单校验"},"嵌套表单校验"),Object(l.b)("p",null,"嵌套表单的表单域校验方式跟上述提到的",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#%E5%86%85%E7%BD%AE%E6%A0%A1%E9%AA%8C"}),"内置校验"),"和",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#%E8%A1%A8%E5%8D%95%E5%9F%9F%E6%A0%A1%E9%AA%8C"}),"表单域校验"),"的校验方式和用法一致，这里不再重复描述。"),Object(l.b)("p",null,"嵌套表单的全局校验需要特别注意返回值的数据结构。"),Object(l.b)("p",null,"基本用法："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport {\n  useFormState,\n  FormItem,\n  Label,\n  Field,\n  FormStateErrors,\n} from \'@sinoui/rx-form-state\';\n\nfunction validate(values) {\n  let error: FormStateErrors = { address: {} };\n\n  if (values.address && values.address.city) {\n    if (/^\\d/.test(values.address.city)) {\n      error.address[\'city\'] = \'不能以数字开头\';\n    }\n  }\n\n  if (values.address && values.address.street) {\n    if (!values.address.street.endsWith(\'号\')) {\n      error.address[\'street\'] = \'请具体到街道编号\';\n    }\n  }\n  return error;\n}\n\nfunction FormDemo() {\n  const formState = useFormState({}, { validate });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <label>地址</label>\n        <div>\n          <label htmlFor="address.city">城市</label>\n          <Field id="address.city" as="input" name="address.city" required />\n          <FieldError name="address.city" />\n        </div>\n        <div>\n          <label htmlFor="address.street">街道</label>\n          <Field\n            id="address.street"\n            as="input"\n            name="address.street"\n            required\n          />\n          <FieldError name="address.street" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(l.b)("p",null,"上述校验方法设置错误状态时，可以借助",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.lodashjs.com/docs/latest#_setobject-path-value"}),"lodash | set"),"实现,例如："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { set } from 'lodash';\n\nfunction validate(values) {\n  let error = {};\n\n  if (values.address && values.address.city) {\n    if (/^\\d/.test(values.address.city)) {\n      set(error, ['address', 'city'], '不能以数字开头');\n    }\n  }\n\n  if (values.address && values.address.street) {\n    if (!values.address.street.endsWith('号')) {\n      set(error, ['address', 'street'], '请具体到街道编号');\n    }\n  }\n  return error;\n}\n")),Object(l.b)("p",null,"运行效果："),Object(l.b)(o.c,{__position:4,__code:'() => {\n  function validate(values) {\n    let error = {}\n    if (values.address && values.address.city) {\n      if (/^\\d/.test(values.address.city)) {\n        set(error, [\'address\', \'city\'], \'不能以数字开头\')\n      }\n    }\n    if (values.address && values.address.street) {\n      if (!values.address.street.endsWith(\'号\')) {\n        set(error, [\'address\', \'street\'], \'请具体到街道编号\')\n      }\n    }\n    return error\n  }\n  const formState = useFormState({}, { validate })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <label>地址</label>\n        <div>\n          <label htmlFor="address.city">城市</label>\n          <Field id="address.city" as="input" name="address.city" required />\n          <FieldError name="address.city" />\n        </div>\n        <div>\n          <label htmlFor="address.street">街道</label>\n          <Field\n            id="address.street"\n            as="input"\n            name="address.street"\n            required\n          />\n          <FieldError name="address.street" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(N={props:S,DefaultLayout:s.a,Playground:o.c,set:i.set,Field:d.a,useFormState:u.a,useFieldTouched:b.a,useFieldError:m.a,FormStateContext:c.a,FieldError:p.a},N.DefaultLayout=s.a,N._frontmatter=j,N),mdxType:"Playground"},(function(){var e=Object(u.a)({},{validate:function(e){var t={};return e.address&&e.address.city&&/^\d/.test(e.address.city)&&Object(i.set)(t,["address","city"],"不能以数字开头"),e.address&&e.address.street&&(e.address.street.endsWith("号")||Object(i.set)(t,["address","street"],"请具体到街道编号")),t}});return Object(l.b)(c.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("label",null,"地址"),Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"address.city"},"城市"),Object(l.b)(d.a,{id:"address.city",as:"input",name:"address.city",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"address.city",mdxType:"FieldError"})),Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"address.street"},"街道"),Object(l.b)(d.a,{id:"address.street",as:"input",name:"address.street",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"address.street",mdxType:"FieldError"}))))})),Object(l.b)("h2",{id:"设置校验错误"},"设置校验错误"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"formState"),"中主要提供四个设置校验错误的方法："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"setFieldError 设置表单域错误"),Object(l.b)("li",{parentName:"ul"},"setFieldAsyncError 设置表单域的异步错误"),Object(l.b)("li",{parentName:"ul"},"setErrors 设置表单校验错误"),Object(l.b)("li",{parentName:"ul"},"setAsyncErrors 设置异步校验错误")),Object(l.b)("p",null,"我们以表单提交时返回的验证错误需要反写在表单域上为例，简单说明自定义校验错误的使用方式。"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport { useFormState, FormItem, Label, Field } from \'@sinoui/rx-form-state\';\nimport http from \'@sinoui/http\';\n\nfunction FormDemo() {\n  const onSubmit = (values) => {\n    http.post(\'/api/test/form\', values).then((result) => {\n      if (result.code === \'501\') {\n        formState.setAsyncErrors(result.msg);\n      }\n    });\n  };\n  const formState = useFormState({}, { onSubmit });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          formState.submit();\n        }}\n      >\n        <div>\n          <label htmlFor="userName">用户名</label>\n          <Field id="userName" as="input" name="userName" required />\n          <FieldError name="userName" />\n        </div>\n        <div>\n          <label>密码</label>\n          <Field as="input" name="password" type="password" required />\n          <FieldError name="password" />\n        </div>\n        <button type="submit">登录</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(l.b)("p",null,"运行效果：(使用 setTimeout 模拟表单提交的响应)"),Object(l.b)(o.c,{__position:5,__code:'() => {\n  const handleReponse = () => {\n    return new Promise(resolve => {\n      setTimeout(\n        () => resolve({ code: \'501\', msg: { password: \'密码错误\' } }),\n        500,\n      )\n    })\n  }\n  const onSubmit = values => {\n    handleReponse().then(\n      result => {\n        if (result.code === \'501\') {\n          formState.setAsyncErrors(result.msg)\n          alert(\'表单提交失败\')\n        } else {\n          alert(\'表单提交成功\')\n        }\n      },\n      () => {\n        alert(\'表单提交失败\')\n      },\n    )\n  }\n  const formState = useFormState({}, { onSubmit })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form\n        onSubmit={event => {\n          event.preventDefault()\n          formState.submit().then(\n            () => {\n              console.log(\'表单校验成功\')\n            },\n            () => {\n              console.log(\'表单校验失败\')\n            },\n          )\n        }}\n      >\n        <div>\n          <label htmlFor="userName">用户名</label>\n          <Field id="userName" as="input" name="userName" required />\n          <FieldError name="userName" />\n        </div>\n        <div>\n          <label>密码</label>\n          <Field as="input" name="password" type="password" required />\n          <FieldError name="password" />\n        </div>\n        <button type="submit">登录</button>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(y={props:S,DefaultLayout:s.a,Playground:o.c,set:i.set,Field:d.a,useFormState:u.a,useFieldTouched:b.a,useFieldError:m.a,FormStateContext:c.a,FieldError:p.a},y.DefaultLayout=s.a,y._frontmatter=j,y),mdxType:"Playground"},(function(){var e=Object(u.a)({},{onSubmit:function(t){new Promise((function(e){setTimeout((function(){return e({code:"501",msg:{password:"密码错误"}})}),500)})).then((function(t){"501"===t.code?(e.setAsyncErrors(t.msg),alert("表单提交失败")):alert("表单提交成功")}),(function(){alert("表单提交失败")}))}});return Object(l.b)(c.a.Provider,{value:e},Object(l.b)("form",{onSubmit:function(t){t.preventDefault(),e.submit().then((function(){console.log("表单校验成功")}),(function(){console.log("表单校验失败")}))}},Object(l.b)("div",null,Object(l.b)("label",{htmlFor:"userName"},"用户名"),Object(l.b)(d.a,{id:"userName",as:"input",name:"userName",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"userName",mdxType:"FieldError"})),Object(l.b)("div",null,Object(l.b)("label",null,"密码"),Object(l.b)(d.a,{as:"input",name:"password",type:"password",required:!0,mdxType:"Field"}),Object(l.b)(p.a,{name:"password",mdxType:"FieldError"})),Object(l.b)("button",{type:"submit"},"登录")))})),Object(l.b)("p",null,"特别注意：这里我们不建议使用",Object(l.b)("inlineCode",{parentName:"p"},"setErrors"),"方法设置表单校验错误，因为只要我们再次触发表单校验，自定义的表单校验错误就会被覆盖。"),Object(l.b)("h2",{id:"执行表单校验"},"执行表单校验"),Object(l.b)("p",null,"为不同场景设计了不同方法，来满足表单校验的执行。这些场景包括："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"场景一：表单域失去焦点自动校验"),Object(l.b)("li",{parentName:"ul"},"场景二：表单提交时整体校验"),Object(l.b)("li",{parentName:"ul"},"场景三：校验个别表单域")),Object(l.b)("h3",{id:"场景一：表单域失去焦点自动校验"},"场景一：表单域失去焦点自动校验"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"formState")," 提供了 ",Object(l.b)("inlineCode",{parentName:"p"},"blur(fieldName: string)]()")," 方法，监听表单域控件的 ",Object(l.b)("inlineCode",{parentName:"p"},"onBlur")," 事件，调用此方法即可完成表单域失去焦点自动校验。 ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"./api-field-component"}),"Field")," 组件已经内置了此规则。"),Object(l.b)("h3",{id:"场景二：表单提交时整体校验"},"场景二：表单提交时整体校验"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"formState")," 的 ",Object(l.b)("inlineCode",{parentName:"p"},"submit()")," 方法会自动校验整个表单。除此之外，还提供了 ",Object(l.b)("inlineCode",{parentName:"p"},"validate()")," 方法，做表单整体校验，如果表单校验失败，则返回 ",Object(l.b)("inlineCode",{parentName:"p"},"false"),"，否则返回 ",Object(l.b)("inlineCode",{parentName:"p"},"true"),"。"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"if (!formState.validate()) {\n  console.log('表单校验失败');\n} else {\n  submitForm();\n}\n")),Object(l.b)("h3",{id:"场景三：校验个别表单域"},"场景三：校验个别表单域"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"formState")," 提供了 ",Object(l.b)("inlineCode",{parentName:"p"},"validateFields(...fieldNames: string[]): Promise<boolean>")," 方法，用来校验多个表单域的。这个方法只会校验指定表单域，不会校验整个表单。如保存表单时只校验个别字段："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"async function save() {\n  const isValid = await formState.validateFields('userName', 'title'); // 同时校验 userName 和 title 表单域\n  if (isValid) {\n    const result = await callSaveApi(formState.values);\n  } else {\n    console.log('表单校验失败');\n  }\n}\n")),Object(l.b)("h3",{id:"获取表单校验状态"},"获取表单校验状态"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"console.log(formState.isValid);\n")))}void 0!==F&&F&&F===Object(F)&&Object.isExtensible(F)&&!F.hasOwnProperty("__filemeta")&&Object.defineProperty(F,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/form-validate.mdx"}}),F.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-form-validate-mdx-a5e67fec894b3bb4d1cb.js.map