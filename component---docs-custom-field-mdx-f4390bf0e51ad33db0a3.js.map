{"version":3,"sources":["webpack:///../docs/custom-field.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useFormState","FormValueMonitor","useField","useFieldValue","FormStateContext","Field","CustomFormFieldDemo","CustomCheckboxGroupDemo","formState","city","Provider","value","name","as","required","style","width","jjcdNum","render","fieldProps","onChange","event","setFieldValue","target","selectedOptions","label","values","JSON","stringify","undefined","isMDXComponent"],"mappings":"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","file":"component---docs-custom-field-mdx-f4390bf0e51ad33db0a3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/workspace/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useFormState, FormValueMonitor, useField, useFieldValue, FormStateContext, Field } from '../src';\nimport CustomFormFieldDemo from './src/CustomFieldDemo';\nimport CustomCheckboxGroupDemo from './src/CustomCheckboxGroupDemo';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"自定义表单域\"\n    }}>{`自定义表单域`}</h1>\n    <p>{`使用`}<a parentName=\"p\" {...{\n        \"href\": \"rx-form-state\"\n      }}>{`@sinoui/rx-form-state`}</a>{`做表单状态管理时，我们可以通过以下三种方式自定义表单域：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`使用`}<inlineCode parentName=\"li\">{`Field`}</inlineCode>{`组件的`}<inlineCode parentName=\"li\">{`as`}</inlineCode>{`属性`}</li>\n      <li parentName=\"ul\">{`使用`}<inlineCode parentName=\"li\">{`Field`}</inlineCode>{`组件的`}<inlineCode parentName=\"li\">{`render`}</inlineCode>{`属性`}</li>\n      <li parentName=\"ul\">{`使用`}<inlineCode parentName=\"li\">{`useField`}</inlineCode>{`的 hook`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"使用-field-的-as-属性自定义表单域\"\n    }}>{`使用 Field 的 as 属性自定义表单域`}</h2>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`as`}</inlineCode>{`属性可以接收多种类型的组件，如`}<inlineCode parentName=\"li\">{`select`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`TextInput`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`Datepicker`}</inlineCode>{`等`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`Field`}</inlineCode>{`组件可以接收`}<inlineCode parentName=\"li\">{`as`}</inlineCode>{`对应组件的属性，并传递给 as 属性对应的组件，比如`}<inlineCode parentName=\"li\">{`readOnly`}</inlineCode>{`、`}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`等`}</li>\n    </ol>\n    <p>{`基本用法:`}</p>\n    <p><inlineCode parentName=\"p\">{`Select.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { Field } from '@sinoui/rx-form-state';\n\nexport default function Select(props) {\n  return <Field as=\"select\" {...props} />;\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`FormDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  FormStateContext\n  Field,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const formState = useFormState({ city: '北京' });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n    <form>\n      <div>\n        <label>用户名</label>\n        <Field name=\"userName\" as=\"input\" required />\n      </div>\n      <div>\n        <label>所在城市</label>\n        <Select name=\"city\" required style={{ width: 160 }}>\n          <option value=\"北京\">北京</option>\n          <option value=\"上海\">上海</option>\n          <option value=\"广州\">广州</option>\n          <option value=\"深圳\">深圳</option>\n        </Select>\n      </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const formState = useFormState({ city: \\'北京\\' })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>用户名</label>\\n          <Field name=\\\"userName\\\" as=\\\"input\\\" required />\\n        </div>\\n        <div>\\n          <label>所在城市</label>\\n          <Field name=\\\"city\\\" as=\\\"select\\\" required style={{ width: 160 }}>\\n            <option value=\\\"北京\\\">北京</option>\\n            <option value=\\\"上海\\\">上海</option>\\n            <option value=\\\"广州\\\">广州</option>\\n            <option value=\\\"深圳\\\">深圳</option>\\n          </Field>\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      useField,\n      useFieldValue,\n      FormStateContext,\n      Field,\n      CustomFormFieldDemo,\n      CustomCheckboxGroupDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const formState = useFormState({\n          city: '北京'\n        });\n        return <FormStateContext.Provider value={formState}>\n    <form>\n      <div>\n        <label>用户名</label>\n        <Field name=\"userName\" as=\"input\" required mdxType=\"Field\" />\n      </div>\n      <div>\n        <label>所在城市</label>\n        <Field name=\"city\" as=\"select\" required style={{\n                width: 160\n              }} mdxType=\"Field\">\n            <option value=\"北京\">北京</option>\n            <option value=\"上海\">上海</option>\n            <option value=\"广州\">广州</option>\n            <option value=\"深圳\">深圳</option>\n            </Field>\n      </div>\n      </form>\n    </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p>{`使用`}<inlineCode parentName=\"p\">{`as`}</inlineCode>{`属性有局限性。它不适用于以下三个场景：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`一次性设置多个表单域的值`}</li>\n      <li parentName=\"ul\">{`自定义的表单域值依赖于多个表单域的值`}</li>\n      <li parentName=\"ul\">{`表单域值需要做二次处理才能指定给表单域控件`}</li>\n    </ul>\n    <p>{`这些场景可以通过`}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`的`}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`属性自定义表单域实现。`}</p>\n    <h2 {...{\n      \"id\": \"使用-field-的-render-属性自定义表单域\"\n    }}>{`使用 Field 的 render 属性自定义表单域`}</h2>\n    <p>{`我们使用`}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`组件的`}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`属性自定义一个可以同时设置多个表单域值的表单域，`}<inlineCode parentName=\"p\">{`render`}</inlineCode>{`方法中有一个`}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{`对象，当表单域值发生变化时，依次调用`}<inlineCode parentName=\"p\">{`formState.setFieldValue()`}</inlineCode>{`方法可以设置多个表单域的值。`}</p>\n    <p>{`基本用法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  Field,\n  useFormState,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const formState = useFormState({});\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>公文标题</label>\n          <Field as=\"input\" name=\"title\" />\n        </div>\n        <div>\n          <label>紧急程度</label>\n          <Field\n            name=\"jjcdNum\"\n            render={({ formState, fieldProps }) => {\n              return (\n                <select\n                  {...fieldProps}\n                  style={{ width: 160 }}\n                  onChange={(event) => {\n                    formState.setFieldValue('jjcdNum', event.target.value);\n                    formState.setFieldValue(\n                      'jjcd',\n                      event.target.selectedOptions[0].label,\n                    );\n                  }}\n                >\n                  <option value=\"001\">急</option>\n                  <option value=\"002\">特急</option>\n                  <option value=\"003\">限时</option>\n                  <option value=\"004\">特提</option>\n                </select>\n              );\n            }}\n          />\n        </div>\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const formState = useFormState({ jjcdNum: \\'002\\' })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>公文标题</label>\\n          <Field as=\\\"input\\\" name=\\\"title\\\" />\\n        </div>\\n        <div>\\n          <label>紧急程度</label>\\n          <Field\\n            name=\\\"jjcdNum\\\"\\n            render={({ formState, fieldProps }) => {\\n              return (\\n                <select\\n                  {...fieldProps}\\n                  style={{ width: 160 }}\\n                  onChange={event => {\\n                    formState.setFieldValue(\\'jjcdNum\\', event.target.value)\\n                    formState.setFieldValue(\\n                      \\'jjcd\\',\\n                      event.target.selectedOptions[0].label,\\n                    )\\n                  }}\\n                >\\n                  <option value=\\\"001\\\">急</option>\\n                  <option value=\\\"002\\\">特急</option>\\n                  <option value=\\\"003\\\">限时</option>\\n                  <option value=\\\"004\\\">特提</option>\\n                </select>\\n              )\\n            }}\\n          />\\n        </div>\\n        <FormValueMonitor>\\n          {values => (\\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      useField,\n      useFieldValue,\n      FormStateContext,\n      Field,\n      CustomFormFieldDemo,\n      CustomCheckboxGroupDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState({\n          jjcdNum: '002'\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>公文标题</label>\n            <Field as=\"input\" name=\"title\" mdxType=\"Field\" />\n          </div>\n          <div>\n            <label>紧急程度</label>\n            <Field name=\"jjcdNum\" render={({\n                formState,\n                fieldProps\n              }) => {\n                return <select {...fieldProps} style={{\n                  width: 160\n                }} onChange={event => {\n                  formState.setFieldValue('jjcdNum', event.target.value);\n                  formState.setFieldValue('jjcd', event.target.selectedOptions[0].label);\n                }}>\n                    <option value=\"001\">急</option>\n                    <option value=\"002\">特急</option>\n                    <option value=\"003\">限时</option>\n                    <option value=\"004\">特提</option>\n                  </select>;\n              }} mdxType=\"Field\" />\n          </div>\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>表单值：{JSON.stringify(values, undefined, 2)}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"值提取\"\n    }}>{`值提取`}</h2>\n    <p>{`Field 组件内置了从表单域组件值变化事件（ `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` ）中提取表单域值的默认规则：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`如果 `}<inlineCode parentName=\"li\">{`event`}</inlineCode>{` 是事件类型，则表单域值为 `}<inlineCode parentName=\"li\">{`event.target.value`}</inlineCode>{`；`}</li>\n      <li parentName=\"ul\">{`否则认为 `}<inlineCode parentName=\"li\">{`event`}</inlineCode>{` 是表单域的值。`}</li>\n    </ul>\n    <p>{`内置的默认值提取规则满足大部分需求，但是如果有定制需求的话，则可以使用 `}<inlineCode parentName=\"p\">{`valueExtract`}</inlineCode>{` 属性自定义值提取规则。如下多选复选框组组件：`}</p>\n    <p><inlineCode parentName=\"p\">{`TimeInput.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\n\nexport default function TimeInput({\n  value = '00:00',\n  onChange,\n}: {\n  onChange: (hour: string, minute: string) => void;\n  value?: string;\n}) {\n  const [hour, minute] = value.split(':');\n\n  return (\n    <div>\n      <label>\n        <input\n          value={hour}\n          onChange={(event) => {\n            onChange(event.target.value, minute);\n          }}\n        />\n        h\n      </label>\n      <label>\n        <input\n          value={minute}\n          onChange={(event) => {\n            onChange(hour, event.target.value);\n          }}\n        />\n        m\n      </label>\n    </div>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`TimeInputField.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport TimeInput from './TimeInput';\n\nexport default function TimeInputField(props) {\n  return (\n    <Field\n      {...props}\n      as={TimeInput}\n      valueExtract={(hour, minute) => \\`\\${hour}:\\${minute}\\`}\n    />\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`CustomFormFieldDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { useFormState, FormStateContext, Field } from '@sinoui/rx-form-state';\nimport TimeInputField from './TimeInputField';\n\nfunction CustomFormFieldDemo() {\n  const formState = useFormState();\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>开始时间</label>\n          <TimeInputField name=\"startTime\" />\n        </div>\n        <div>\n          <label>结束时间</label>\n          <TimeInputField name=\"endTime\" />\n        </div>\n        <FormValueMonitor>\n          {(values) => <div>表单值：{JSON.stringify(values)}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={2} __code={'<CustomFormFieldDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      useField,\n      useFieldValue,\n      FormStateContext,\n      Field,\n      CustomFormFieldDemo,\n      CustomCheckboxGroupDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CustomFormFieldDemo mdxType=\"CustomFormFieldDemo\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"值格式化\"\n    }}>{`值格式化`}</h2>\n    <p>{`如果 `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` 从 `}<inlineCode parentName=\"p\">{`formState`}</inlineCode>{` 中提取的表单域值类型与表单域 `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` 组件的值类型不匹配，则可以通过 `}<inlineCode parentName=\"p\">{`valueFormat`}</inlineCode>{` 属性指定值格式化器，将表单中的值转换成 `}<inlineCode parentName=\"p\">{`as`}</inlineCode>{` 组件可以使用的值。如，复选框组组件，我们期望在表单状态中存储的值是字符串类型的，如：`}<inlineCode parentName=\"p\">{`'篮球,足球'`}</inlineCode>{`，但是复选框组组件只接收数组类型的值。`}</p>\n    <p><inlineCode parentName=\"p\">{`CheckboxGroup.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nexport interface Props {\n  items: { value: string; label: string }[];\n  value?: string[];\n  onChange: (value: string[]) => void;\n}\n\nfunction CheckboxGroup(props: Props) {\n  const { items, value = [], onChange } = props;\n\n  const handleCheckboxChange = (checkboxValue: string) => {\n    const idx = value.indexOf(checkboxValue);\n    if (!onChange) {\n      return;\n    }\n    if (idx === -1) {\n      onChange([...value, checkboxValue]);\n    } else {\n      onChange([...value.slice(0, idx), ...value.slice(idx + 1)]);\n    }\n  };\n\n  return (\n    <div>\n      {items.map((item) => (\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={value && value.includes(item.value)}\n            onChange={() => handleCheckboxChange(item.value)}\n          />\n          {item.label}\n        </label>\n      ))}\n    </div>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`CheckboxGroupField.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function valueExtract(value: string[]) {\n  return value.join(',');\n}\n\nfunction valueFormat(value: string) {\n  return value.split(',');\n}\n\nfunction CheckboxGroupField({\n  name,\n  items,\n}: {\n  name: string;\n  items: { value: string; label: string }[];\n}) {\n  return (\n    <Field<CheckboxGroupProps, string, string[]>\n      name={name}\n      as={CheckboxGroup}\n      valueExtract={valueExtract}\n      valueFormat={valueFormat}\n      items={items}\n    />\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`CheckboxGroupFieldDemo.tsx`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  FormStateContext,\n  FormValueMonitor,\n} from '@sinoui/rx-form-state';\nimport CheckboxGroupField from './CheckboxGroupField';\n\nconst items = ['足球', '篮球', '排球', '乒乓球'].map((item) => ({\n  value: item,\n  label: item,\n}));\nfunction CheckboxGroupFieldDemo() {\n  const formState = useFormState({ fav: '足球,篮球' });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <CheckboxGroupField items={items} name=\"fav\" />\n      <FormValueMonitor path=\"fav\">\n        {(fav) => <div>fav值: {fav}</div>}\n      </FormValueMonitor>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={3} __code={'<CustomCheckboxGroupDemo />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      useField,\n      useFieldValue,\n      FormStateContext,\n      Field,\n      CustomFormFieldDemo,\n      CustomCheckboxGroupDemo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CustomCheckboxGroupDemo mdxType=\"CustomCheckboxGroupDemo\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}