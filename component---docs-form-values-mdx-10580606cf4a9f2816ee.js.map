{"version":3,"sources":["webpack:///../docs/form-values.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useFormState","FormValueMonitor","Field","FormStateContext","formState","userName","sex","Provider","value","as","name","address","city","region","values","JSON","stringify","undefined","selector","path","editable","readOnly","parseScore","score","isNaN","parseInt","type","chinese","math","english","visibility","parseNumber","str","relyFields","relyFn","B","C","relys","draft","A","E","D","isMDXComponent"],"mappings":"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","file":"component---docs-form-values-mdx-10580606cf4a9f2816ee.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mobileoa/workspace/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useFormState, FormValueMonitor, Field, FormStateContext } from '../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"表单值处理\"\n    }}>{`表单值处理`}</h1>\n    <p>{`@sinoui/rx-form-state 的核心作用就是用来处理表单值的。本篇教程将会从以下方面一一介绍如何采用本库处理表单的值：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`表单域值绑定`}</li>\n      <li parentName=\"ul\">{`展现表单值`}</li>\n      <li parentName=\"ul\">{`表单域值关联`}</li>\n      <li parentName=\"ul\">{`全局值关联`}</li>\n      <li parentName=\"ul\">{`设置表单域的值`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"创建表单状态上下文\"\n    }}>{`创建表单状态上下文`}</h2>\n    <p>{`无论我们要收集表单值、表单验证还是提交表单，我们都需要先创建表单状态的上下文。通过`}<a parentName=\"p\" {...{\n        \"href\": \"api-use-form-state\"\n      }}>{`useFormState`}</a>{`可创建表单状态管理器。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useFormState } from '@sinoui/rx-form-state';\nfunction FormDemo() {\n  const initialValue = {}; // 表单默认值\n  const options = {}; // 创建表单状态管理器的配置\n  const formState = useFormState(initialValue, options);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"表单域值绑定\"\n    }}>{`表单域值绑定`}</h2>\n    <p>{`对于一个表单来说，它的值是对象结构的。如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"userName\": \"紫诺\",\n  \"sex\": \"女\"\n}\n`}</code></pre>\n    <p>{`如果我们要维护姓名和性别这两个字段，可以使用`}<a parentName=\"p\" {...{\n        \"href\": \"api-field-component\"\n      }}>{`Field`}</a>{`组件定义表单域。`}<strong parentName=\"p\">{`通过`}<inlineCode parentName=\"strong\">{`Field`}</inlineCode>{`组件的`}<inlineCode parentName=\"strong\">{`name`}</inlineCode>{`属性，可以将表单域组件和表单状态中的值进行绑定。`}</strong>{`如下所示，我们定义一个维护姓名字段值的表单域：`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`通过`}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`组件的`}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`属性，可以将表单域组件和表单状态中的值进行绑定。`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { useFormState, Field, FormStateContext } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = {\n    userName: '紫诺',\n    sex: '女',\n  };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        复制的姓名：\n        <Field as=\"input\" name=\"userName\" />\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`效果如下：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const initialValues = {\\n    userName: \\'紫诺\\',\\n    sex: \\'女\\',\\n  }\\n  const formState = useFormState(initialValues)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        姓名：\\n        <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n        复制的姓名：\\n        <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialValues = {\n          userName: '紫诺',\n          sex: '女'\n        };\n        const formState = useFormState(initialValues);\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          姓名：\n          <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n          复制的姓名：\n          <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p><inlineCode parentName=\"p\">{`name`}</inlineCode>{`属性可以指定任意深度的对象路径。例如，如果我们的表单值的结构如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"userName\": \"紫诺\",\n  \"address\": {\n    \"city\": \"北京\",\n    \"region\": \"海淀\"\n  }\n}\n`}</code></pre>\n    <p>{`那么关于地址的两个表单域的`}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`可以如下表示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<form>\n  城市：\n  <Field as=\"input\" name=\"address.city\" />\n  区/县：\n  <Field as=\"input\" name=\"address.region\" />\n</form>\n`}</code></pre>\n    <p>{`效果如下：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const initialValues = {\\n    userName: \\'紫诺\\',\\n    address: {\\n      city: \\'北京\\',\\n      region: \\'海淀\\',\\n    },\\n  }\\n  const formState = useFormState(initialValues)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        姓名：\\n        <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n        城市：\\n        <Field as=\\\"input\\\" name=\\\"address.city\\\" />\\n        区/县：\\n        <Field as=\\\"input\\\" name=\\\"address.region\\\" />\\n        <div>\\n          表单值：\\n          <FormValueMonitor>\\n            {values => JSON.stringify(values, undefined, 2)}\\n          </FormValueMonitor>\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialValues = {\n          userName: '紫诺',\n          address: {\n            city: '北京',\n            region: '海淀'\n          }\n        };\n        const formState = useFormState(initialValues);\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          姓名：\n          <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n          城市：\n          <Field as=\"input\" name=\"address.city\" mdxType=\"Field\" />\n          区/县：\n          <Field as=\"input\" name=\"address.region\" mdxType=\"Field\" />\n          <div>\n            表单值：\n            <FormValueMonitor mdxType=\"FormValueMonitor\">\n              {values => JSON.stringify(values, undefined, 2)}\n            </FormValueMonitor>\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p>{`注意：为了直观的看到表单值变化，使用了`}<a parentName=\"p\" {...{\n        \"href\": \"./api-form-value-monitor-component\"\n      }}>{`FormValueMonitor`}</a>{`组件来监听表单值并以 JSON 格式展现出来。`}</p>\n    <h3 {...{\n      \"id\": \"从-dom-中提取值\"\n    }}>{`从 DOM 中提取值`}</h3>\n    <p>{`Field 组件内置了从表单域组件值变化事件（ `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` ）中提取表单域值的默认规则：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`如果 `}<inlineCode parentName=\"li\">{`event`}</inlineCode>{` 是事件类型，则表单域值为 `}<inlineCode parentName=\"li\">{`event.target.value`}</inlineCode>{`；`}</li>\n      <li parentName=\"ul\">{`否则认为 `}<inlineCode parentName=\"li\">{`event`}</inlineCode>{` 是表单域的值。`}</li>\n    </ul>\n    <p>{`如果默认规则不符合要求，可以查看`}<a parentName=\"p\" {...{\n        \"href\": \"custom-field\"\n      }}>{`自定义表单域`}</a>{`中关于值提取的说明。`}</p>\n    <h2 {...{\n      \"id\": \"展现表单值\"\n    }}>{`展现表单值`}</h2>\n    <p>{`上一小节的示例中已经演示了采用`}<a parentName=\"p\" {...{\n        \"href\": \"./api-form-value-monitor-component\"\n      }}>{`FormValueMonitor`}</a>{`组件来展现表单值。这一小节详细介绍用`}<a parentName=\"p\" {...{\n        \"href\": \"./api-form-value-monitor-component\"\n      }}>{`FormValueMonitor`}</a>{`组件展现表单值。`}</p>\n    <p><inlineCode parentName=\"p\">{`FormValueMonitor`}</inlineCode>{`组件会监控表单的值变化，一旦值发生变化，就会获取到新的表单值，并用新表单值作为参数调用`}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`属性指定的渲染函数，展现出表单值。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺', address: { city: '北京' } };\n  const formState = useFormState(initialValues);\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        所在城市：\n        <Field as=\"input\" name=\"address.city\" />\n        <FormValueMonitor>\n          {(values) => (\n            <div>\n              填写的信息：{values.userName}@\n              {values.address && values.address.city}\n            </div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`效果如下：`}</p>\n    <Playground __position={2} __code={'() => {\\n  const initialValues = { userName: \\'紫诺\\', address: { city: \\'北京\\' } }\\n  const formState = useFormState(initialValues)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        姓名：\\n        <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n        所在城市：\\n        <Field as=\\\"input\\\" name=\\\"address.city\\\" />\\n        <FormValueMonitor>\\n          {values => (\\n            <div>\\n              填写的信息：{values.userName}@\\n              {values.address && values.address.city}\\n            </div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialValues = {\n          userName: '紫诺',\n          address: {\n            city: '北京'\n          }\n        };\n        const formState = useFormState(initialValues);\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          姓名：\n          <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n          所在城市：\n          <Field as=\"input\" name=\"address.city\" mdxType=\"Field\" />\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>\n                填写的信息：{values.userName}@\n                {values.address && values.address.city}\n              </div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p>{`我们可以指定一个`}<inlineCode parentName=\"p\">{`selector`}</inlineCode>{`属性，定义值监控的范围和返回结果，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nconst userInfoSelector = (values: any) =>\n  \\`\\${values.userName || ''}@\\${(values.address && values.address.city) || ''}\\`;\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺', address: { city: '北京' } };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        所在城市：\n        <Field as=\"input\" name=\"address.city\" />\n        <FormValueMonitor selector={userInfoSelector}>\n          {(value) => <div>填写的信息：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`效果如下：`}</p>\n    <Playground __position={3} __code={'() => {\\n  const initialValues = { userName: \\'紫诺\\', address: { city: \\'北京\\' } }\\n  const formState = useFormState(initialValues)\\n  const userInfoSelector = values =>\\n    `${values.userName || \\'\\'}@${(values.address && values.address.city) ||\\n      \\'\\'}`\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        姓名：\\n        <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n        所在城市：\\n        <Field as=\\\"input\\\" name=\\\"address.city\\\" />\\n        <FormValueMonitor selector={userInfoSelector}>\\n          {value => <div>填写的信息：{value}</div>}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialValues = {\n          userName: '紫诺',\n          address: {\n            city: '北京'\n          }\n        };\n        const formState = useFormState(initialValues);\n\n        const userInfoSelector = values => `${values.userName || ''}@${values.address && values.address.city || ''}`;\n\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          姓名：\n          <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n          所在城市：\n          <Field as=\"input\" name=\"address.city\" mdxType=\"Field\" />\n          <FormValueMonitor selector={userInfoSelector} mdxType=\"FormValueMonitor\">\n            {value => <div>填写的信息：{value}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p>{`我们还可以指定`}<inlineCode parentName=\"p\">{`path`}</inlineCode>{`属性，只监听某个表单字段的值，如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺' };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        <FormValueMonitor path=\"userName\">\n          {(value) => <div>填写的姓名是：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`效果如下：`}</p>\n    <Playground __position={4} __code={'() => {\\n  const initialValues = { userName: \\'紫诺\\' }\\n  const formState = useFormState(initialValues)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        姓名：\\n        <Field as=\\\"input\\\" name=\\\"userName\\\" />\\n        <FormValueMonitor path=\\\"userName\\\">\\n          {value => <div>填写的姓名是：{value}</div>}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const initialValues = {\n          userName: '紫诺'\n        };\n        const formState = useFormState(initialValues);\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          姓名：\n          <Field as=\"input\" name=\"userName\" mdxType=\"Field\" />\n          <FormValueMonitor path=\"userName\" mdxType=\"FormValueMonitor\">\n            {value => <div>填写的姓名是：{value}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p><inlineCode parentName=\"p\">{`FormValueMonitor`}</inlineCode>{`有多个用途，比如：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`控制表单元素的只读`}</li>\n      <li parentName=\"ul\">{`展现统计信息`}</li>\n      <li parentName=\"ul\">{`控制 UI 元素的可见性`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"示例：控制表单元素的只读\"\n    }}>{`示例：控制表单元素的只读`}</h3>\n    <Playground __position={5} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        是否可编辑：\\n        <Field as=\\\"select\\\" name=\\\"editable\\\">\\n          <option value=\\\"1\\\">是</option>\\n          <option value=\\\"0\\\">否</option>\\n        </Field>\\n        姓名：\\n        <FormValueMonitor path=\\\"editable\\\">\\n          {editable => (\\n            <Field as=\\\"input\\\" name=\\\"userNmae\\\" readOnly={editable === \\'0\\'} />\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          是否可编辑：\n          <Field as=\"select\" name=\"editable\" mdxType=\"Field\">\n            <option value=\"1\">是</option>\n            <option value=\"0\">否</option>\n          </Field>\n          姓名：\n          <FormValueMonitor path=\"editable\" mdxType=\"FormValueMonitor\">\n            {editable => <Field as=\"input\" name=\"userNmae\" readOnly={editable === '0'} mdxType=\"Field\" />}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"示例：展现统计信息\"\n    }}>{`示例：展现统计信息`}</h3>\n    <Playground __position={6} __code={'() => {\\n  const formState = useFormState()\\n  const parseScore = score =>\\n    score && !isNaN(parseInt(score)) ? parseInt(score) : 0\\n  const countSelector = value =>\\n    parseScore(value.chinese) +\\n    parseScore(value.math) +\\n    parseScore(value.english)\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <h3>期末考试成绩</h3>\\n        语文：\\n        <Field as=\\\"input\\\" type=\\\"number\\\" name=\\\"chinese\\\" />\\n        数学：\\n        <Field as=\\\"input\\\" type=\\\"number\\\" name=\\\"math\\\" />\\n        英语：\\n        <Field as=\\\"input\\\" type=\\\"number\\\" name=\\\"english\\\" />\\n        <FormValueMonitor selector={countSelector}>\\n          {value => <div>总分：{value}</div>}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n\n        const parseScore = score => score && !isNaN(parseInt(score)) ? parseInt(score) : 0;\n\n        const countSelector = value => parseScore(value.chinese) + parseScore(value.math) + parseScore(value.english);\n\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <h3>期末考试成绩</h3>\n          语文：\n          <Field as=\"input\" type=\"number\" name=\"chinese\" mdxType=\"Field\" />\n          数学：\n          <Field as=\"input\" type=\"number\" name=\"math\" mdxType=\"Field\" />\n          英语：\n          <Field as=\"input\" type=\"number\" name=\"english\" mdxType=\"Field\" />\n          <FormValueMonitor selector={countSelector} mdxType=\"FormValueMonitor\">\n            {value => <div>总分：{value}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"示例：控制-ui-元素的可见性\"\n    }}>{`示例：控制 UI 元素的可见性`}</h3>\n    <Playground __position={7} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        是否可见：\\n        <Field as=\\\"select\\\" name=\\\"visibility\\\">\\n          <option value=\\\"1\\\">是</option>\\n          <option value=\\\"0\\\">否</option>\\n        </Field>\\n        姓名：\\n        <FormValueMonitor path=\\\"visibility\\\">\\n          {visibility =>\\n            visibility !== \\'0\\' ? <Field as=\\\"input\\\" name=\\\"userNmae\\\" /> : null\\n          }\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          是否可见：\n          <Field as=\"select\" name=\"visibility\" mdxType=\"Field\">\n            <option value=\"1\">是</option>\n            <option value=\"0\">否</option>\n          </Field>\n          姓名：\n          <FormValueMonitor path=\"visibility\" mdxType=\"FormValueMonitor\">\n            {visibility => visibility !== '0' ? <Field as=\"input\" name=\"userNmae\" mdxType=\"Field\" /> : null}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"表单域值关联\"\n    }}>{`表单域值关联`}</h2>\n    <p>{`上一节介绍的`}<inlineCode parentName=\"p\">{`FormValueMonitor`}</inlineCode>{`能展现表单的统计信息，但是如果需要将展现的表单统计信息也存储到表单值对象中，就可以采用表单域值关联。`}<a parentName=\"p\" {...{\n        \"href\": \"api-field-component\"\n      }}>{`Field`}</a>{`有两个属性：`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`relyFields`}</inlineCode>{` - 定义表单域值关联计算逻辑依赖的其他表单域名称`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`relyFn`}</inlineCode>{` - 定义表单域值关联计算的逻辑。它是一个接收整个表单值的函数，它的返回值将会作为该表单域的值。`}</li>\n    </ul>\n    <p>{`例如：`}<inlineCode parentName=\"p\">{`A = B + C`}</inlineCode>{`这样的一个表单域值关联关系，首先我们需要在表单域 A 上定义`}<inlineCode parentName=\"p\">{`relyFields`}</inlineCode>{`为`}<inlineCode parentName=\"p\">{`['B', 'C']`}</inlineCode>{`，这样当`}<inlineCode parentName=\"p\">{`B`}</inlineCode>{`或者`}<inlineCode parentName=\"p\">{`C`}</inlineCode>{`表单域值发生变更时，就会调用`}<inlineCode parentName=\"p\">{`A`}</inlineCode>{`表单域的`}<inlineCode parentName=\"p\">{`relyFn`}</inlineCode>{`属性。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function parseNumber(str) {\n  return str && !isNaN(parseInt(str)) ? parseInt(str) : 0;\n}\n\nfunction countA(values) {\n  const { B, C } = values;\n\n  return parseNumber(B) + parseNumber(C);\n}\n\n<Field name=\"A\" as=\"input\" type=\"number\" relyFields={[\"B\", \"C\"]} relyFn={countA} />\n<Field name=\"B\" as=\"input\" type=\"number\" />\n<Field name=\"C\" as=\"input\" type=\"number\" />\n`}</code></pre>\n    <p>{`演示效果如下：`}</p>\n    <Playground __position={8} __code={'() => {\\n  const formState = useFormState()\\n  function parseNumber(str) {\\n    return str && !isNaN(parseInt(str)) ? parseInt(str) : 0\\n  }\\n  function countA(values) {\\n    const { B, C } = values\\n    return parseNumber(B) + parseNumber(C)\\n  }\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <h3>表单域值关联：A = B + C</h3>\\n        A：\\n        <Field\\n          name=\\\"A\\\"\\n          as=\\\"input\\\"\\n          type=\\\"number\\\"\\n          relyFields={[\\'B\\', \\'C\\']}\\n          relyFn={countA}\\n        />\\n        B：\\n        <Field name=\\\"B\\\" as=\\\"input\\\" type=\\\"number\\\" />\\n        C：\\n        <Field name=\\\"C\\\" as=\\\"input\\\" type=\\\"number\\\" />\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n\n        function parseNumber(str) {\n          return str && !isNaN(parseInt(str)) ? parseInt(str) : 0;\n        }\n\n        function countA(values) {\n          const {\n            B,\n            C\n          } = values;\n          return parseNumber(B) + parseNumber(C);\n        }\n\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <h3>表单域值关联：A = B + C</h3>\n          A：\n          <Field name=\"A\" as=\"input\" type=\"number\" relyFields={['B', 'C']} relyFn={countA} mdxType=\"Field\" />\n          B：\n          <Field name=\"B\" as=\"input\" type=\"number\" mdxType=\"Field\" />\n          C：\n          <Field name=\"C\" as=\"input\" type=\"number\" mdxType=\"Field\" />\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"全局值关联\"\n    }}>{`全局值关联`}</h2>\n    <p>{`有时候，表单域值关联无法满足值关联的需求，比如`}<inlineCode parentName=\"p\">{`A = B + C`}</inlineCode>{`，而`}<inlineCode parentName=\"p\">{`A`}</inlineCode>{`不是一个可见的表单域元素。这时可以用一下全局值关联`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\n// A = B + C\nconst abcRely = [\n  'B',\n  'C',\n  (draft) => {\n    if (draft.B && draft.C) {\n      draft.A = draft.B + draft.C;\n    }\n  },\n];\n\n// E = D\nconst deRely = [\n  'D',\n  (draft) => {\n    draft.E = draft.D;\n  },\n];\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺' };\n  const formState = useFormState(initialValues, {\n    relys: [abcRely, deRely],\n  });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        B：\n        <Field as=\"input\" name=\"B\" />\n        C：\n        <Field as=\"input\" name=\"C\" />\n        D:\n        <Field as=\"input\" name=\"D\" />\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`效果如下：`}</p>\n    <Playground __position={9} __code={'() => {\\n  // A = B + C\\n  const abcRely = [\\n    \\'B\\',\\n    \\'C\\',\\n    draft => {\\n      if (draft.B && draft.C) {\\n        draft.A = draft.B + draft.C\\n      }\\n    },\\n  ]\\n  // E = D\\n  const deRely = [\\n    \\'D\\',\\n    draft => {\\n      draft.E = draft.D\\n    },\\n  ]\\n  const formState = useFormState(\\n    {},\\n    {\\n      relys: [abcRely, deRely],\\n    },\\n  )\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        B：\\n        <Field as=\\\"input\\\" name=\\\"B\\\" />\\n        C：\\n        <Field as=\\\"input\\\" name=\\\"C\\\" />\\n        D:\\n        <Field as=\\\"input\\\" name=\\\"D\\\" />\\n        <FormValueMonitor>\\n          {values => (\\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        // A = B + C\n        const abcRely = ['B', 'C', draft => {\n          if (draft.B && draft.C) {\n            draft.A = draft.B + draft.C;\n          }\n        }]; // E = D\n\n        const deRely = ['D', draft => {\n          draft.E = draft.D;\n        }];\n        const formState = useFormState({}, {\n          relys: [abcRely, deRely]\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          B：\n          <Field as=\"input\" name=\"B\" mdxType=\"Field\" />\n          C：\n          <Field as=\"input\" name=\"C\" mdxType=\"Field\" />\n          D:\n          <Field as=\"input\" name=\"D\" mdxType=\"Field\" />\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>表单值：{JSON.stringify(values, undefined, 2)}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置表单域的值\"\n    }}>{`设置表单域的值`}</h2>\n    <p>{`当你需要在`}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`组件之外设置个别表单域的值，你可以调用`}<inlineCode parentName=\"p\">{`formState.setFieldValue`}</inlineCode>{`函数。如下所示：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺' };\n  const formState = useFormState(initialValues);\n\n  const handleClick = () => {\n    formState.setFieldValue('userName', '张三');\n  };\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        <button onClick={handleClick}>将姓名变更为张三</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"设置整个表单值\"\n    }}>{`设置整个表单值`}</h2>\n    <p>{`表单的初始值有可能需要通过 Ajax 从服务器端加载到。例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/web-forms';\nimport useRestItemApi from '@sinoui/use-rest-item-api';\n\nfunction FormDemo() {\n  const dataSource = useRestItemApi('/users', '1');\n  const formState = useFormState(dataSource.data);\n\n  const handleClick = () => {\n    formState.setFieldValue('userName', '张三');\n  };\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        <button onClick={handleClick}>将姓名变更为张三</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}