(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{GZsA:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return F}));var a=t("Fcif"),r=t("+I+c"),o=t("/FXl"),i=t("TjRS"),l=t("ZFoC"),u=t("xIpy"),m=t("JDL0"),s=t("hh+d"),c=t("IUht"),b=(t("aD51"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/form-values.mdx"}});var d={_frontmatter:b},p=i.a;function F(e){var n,t,F,f,O,j,v,y,N,S,C=e.components,x=Object(r.a)(e,["components"]);return Object(o.b)(p,Object(a.a)({},d,x,{components:C,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"表单值处理"},"表单值处理"),Object(o.b)("p",null,"@sinoui/rx-form-state 的核心作用就是用来处理表单值的。本篇教程将会从以下方面一一介绍如何采用本库处理表单的值："),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"表单域值绑定"),Object(o.b)("li",{parentName:"ul"},"展现表单值"),Object(o.b)("li",{parentName:"ul"},"表单域值关联"),Object(o.b)("li",{parentName:"ul"},"全局值关联"),Object(o.b)("li",{parentName:"ul"},"设置表单域的值")),Object(o.b)("h2",{id:"创建表单状态上下文"},"创建表单状态上下文"),Object(o.b)("p",null,"无论我们要收集表单值、表单验证还是提交表单，我们都需要先创建表单状态的上下文。通过",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"api-use-form-state"}),"useFormState"),"可创建表单状态管理器。如下所示："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import { useFormState } from '@sinoui/rx-form-state';\nfunction FormDemo() {\n  const initialValue = {}; // 表单默认值\n  const options = {}; // 创建表单状态管理器的配置\n  const formState = useFormState(initialValue, options);\n}\n")),Object(o.b)("h2",{id:"表单域值绑定"},"表单域值绑定"),Object(o.b)("p",null,"对于一个表单来说，它的值是对象结构的。如："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "userName": "紫诺",\n  "sex": "女"\n}\n')),Object(o.b)("p",null,"如果我们要维护姓名和性别这两个字段，可以使用",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"api-field-component"}),"Field"),"组件定义表单域。",Object(o.b)("strong",{parentName:"p"},"通过",Object(o.b)("inlineCode",{parentName:"strong"},"Field"),"组件的",Object(o.b)("inlineCode",{parentName:"strong"},"name"),"属性，可以将表单域组件和表单状态中的值进行绑定。"),"如下所示，我们定义一个维护姓名字段值的表单域："),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"通过",Object(o.b)("inlineCode",{parentName:"p"},"Field"),"组件的",Object(o.b)("inlineCode",{parentName:"p"},"name"),"属性，可以将表单域组件和表单状态中的值进行绑定。")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport { useFormState, Field, FormStateContext } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = {\n    userName: '紫诺',\n    sex: '女',\n  };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        复制的姓名：\n        <Field as=\"input\" name=\"userName\" />\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(o.b)("p",null,"效果如下："),Object(o.b)(l.c,{__position:0,__code:'() => {\n  const initialValues = {\n    userName: \'紫诺\',\n    sex: \'女\',\n  }\n  const formState = useFormState(initialValues)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as="input" name="userName" />\n        复制的姓名：\n        <Field as="input" name="userName" />\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(n={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},n.DefaultLayout=i.a,n._frontmatter=b,n),mdxType:"Playground"},(function(){var e=Object(u.a)({userName:"紫诺",sex:"女"});return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"姓名：",Object(o.b)(s.a,{as:"input",name:"userName",mdxType:"Field"}),"复制的姓名：",Object(o.b)(s.a,{as:"input",name:"userName",mdxType:"Field"})))})),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"name"),"属性可以指定任意深度的对象路径。例如，如果我们的表单值的结构如下："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "userName": "紫诺",\n  "address": {\n    "city": "北京",\n    "region": "海淀"\n  }\n}\n')),Object(o.b)("p",null,"那么关于地址的两个表单域的",Object(o.b)("inlineCode",{parentName:"p"},"name"),"可以如下表示："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'<form>\n  城市：\n  <Field as="input" name="address.city" />\n  区/县：\n  <Field as="input" name="address.region" />\n</form>\n')),Object(o.b)("p",null,"效果如下："),Object(o.b)(l.c,{__position:1,__code:'() => {\n  const initialValues = {\n    userName: \'紫诺\',\n    address: {\n      city: \'北京\',\n      region: \'海淀\',\n    },\n  }\n  const formState = useFormState(initialValues)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as="input" name="userName" />\n        城市：\n        <Field as="input" name="address.city" />\n        区/县：\n        <Field as="input" name="address.region" />\n        <div>\n          表单值：\n          <FormValueMonitor>\n            {values => JSON.stringify(values, undefined, 2)}\n          </FormValueMonitor>\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(t={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},t.DefaultLayout=i.a,t._frontmatter=b,t),mdxType:"Playground"},(function(){var e=Object(u.a)({userName:"紫诺",address:{city:"北京",region:"海淀"}});return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"姓名：",Object(o.b)(s.a,{as:"input",name:"userName",mdxType:"Field"}),"城市：",Object(o.b)(s.a,{as:"input",name:"address.city",mdxType:"Field"}),"区/县：",Object(o.b)(s.a,{as:"input",name:"address.region",mdxType:"Field"}),Object(o.b)("div",null,"表单值：",Object(o.b)(m.a,{mdxType:"FormValueMonitor"},(function(e){return JSON.stringify(e,void 0,2)})))))})),Object(o.b)("p",null,"注意：为了直观的看到表单值变化，使用了",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"./api-form-value-monitor-component"}),"FormValueMonitor"),"组件来监听表单值并以 JSON 格式展现出来。"),Object(o.b)("h3",{id:"从-dom-中提取值"},"从 DOM 中提取值"),Object(o.b)("p",null,"Field 组件内置了从表单域组件值变化事件（ ",Object(o.b)("inlineCode",{parentName:"p"},"event")," ）中提取表单域值的默认规则："),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"如果 ",Object(o.b)("inlineCode",{parentName:"li"},"event")," 是事件类型，则表单域值为 ",Object(o.b)("inlineCode",{parentName:"li"},"event.target.value"),"；"),Object(o.b)("li",{parentName:"ul"},"否则认为 ",Object(o.b)("inlineCode",{parentName:"li"},"event")," 是表单域的值。")),Object(o.b)("p",null,"如果默认规则不符合要求，可以查看",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"custom-field"}),"自定义表单域"),"中关于值提取的说明。"),Object(o.b)("h2",{id:"展现表单值"},"展现表单值"),Object(o.b)("p",null,"上一小节的示例中已经演示了采用",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"./api-form-value-monitor-component"}),"FormValueMonitor"),"组件来展现表单值。这一小节详细介绍用",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"./api-form-value-monitor-component"}),"FormValueMonitor"),"组件展现表单值。"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"FormValueMonitor"),"组件会监控表单的值变化，一旦值发生变化，就会获取到新的表单值，并用新表单值作为参数调用",Object(o.b)("inlineCode",{parentName:"p"},"children"),"属性指定的渲染函数，展现出表单值。如下所示："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺', address: { city: '北京' } };\n  const formState = useFormState(initialValues);\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        所在城市：\n        <Field as=\"input\" name=\"address.city\" />\n        <FormValueMonitor>\n          {(values) => (\n            <div>\n              填写的信息：{values.userName}@\n              {values.address && values.address.city}\n            </div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(o.b)("p",null,"效果如下："),Object(o.b)(l.c,{__position:2,__code:'() => {\n  const initialValues = { userName: \'紫诺\', address: { city: \'北京\' } }\n  const formState = useFormState(initialValues)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as="input" name="userName" />\n        所在城市：\n        <Field as="input" name="address.city" />\n        <FormValueMonitor>\n          {values => (\n            <div>\n              填写的信息：{values.userName}@\n              {values.address && values.address.city}\n            </div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(F={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},F.DefaultLayout=i.a,F._frontmatter=b,F),mdxType:"Playground"},(function(){var e=Object(u.a)({userName:"紫诺",address:{city:"北京"}});return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"姓名：",Object(o.b)(s.a,{as:"input",name:"userName",mdxType:"Field"}),"所在城市：",Object(o.b)(s.a,{as:"input",name:"address.city",mdxType:"Field"}),Object(o.b)(m.a,{mdxType:"FormValueMonitor"},(function(e){return Object(o.b)("div",null,"填写的信息：",e.userName,"@",e.address&&e.address.city)}))))})),Object(o.b)("p",null,"我们可以指定一个",Object(o.b)("inlineCode",{parentName:"p"},"selector"),"属性，定义值监控的范围和返回结果，如下所示："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nconst userInfoSelector = (values: any) =>\n  `${values.userName || ''}@${(values.address && values.address.city) || ''}`;\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺', address: { city: '北京' } };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        所在城市：\n        <Field as=\"input\" name=\"address.city\" />\n        <FormValueMonitor selector={userInfoSelector}>\n          {(value) => <div>填写的信息：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(o.b)("p",null,"效果如下："),Object(o.b)(l.c,{__position:3,__code:"() => {\n  const initialValues = { userName: '紫诺', address: { city: '北京' } }\n  const formState = useFormState(initialValues)\n  const userInfoSelector = values =>\n    `${values.userName || ''}@${(values.address && values.address.city) ||\n      ''}`\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        所在城市：\n        <Field as=\"input\" name=\"address.city\" />\n        <FormValueMonitor selector={userInfoSelector}>\n          {value => <div>填写的信息：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}",__scope:(f={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},f.DefaultLayout=i.a,f._frontmatter=b,f),mdxType:"Playground"},(function(){var e=Object(u.a)({userName:"紫诺",address:{city:"北京"}});return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"姓名：",Object(o.b)(s.a,{as:"input",name:"userName",mdxType:"Field"}),"所在城市：",Object(o.b)(s.a,{as:"input",name:"address.city",mdxType:"Field"}),Object(o.b)(m.a,{selector:function(e){return(e.userName||"")+"@"+(e.address&&e.address.city||"")},mdxType:"FormValueMonitor"},(function(e){return Object(o.b)("div",null,"填写的信息：",e)}))))})),Object(o.b)("p",null,"我们还可以指定",Object(o.b)("inlineCode",{parentName:"p"},"path"),"属性，只监听某个表单字段的值，如下所示："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺' };\n  const formState = useFormState(initialValues);\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        <FormValueMonitor path=\"userName\">\n          {(value) => <div>填写的姓名是：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(o.b)("p",null,"效果如下："),Object(o.b)(l.c,{__position:4,__code:'() => {\n  const initialValues = { userName: \'紫诺\' }\n  const formState = useFormState(initialValues)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as="input" name="userName" />\n        <FormValueMonitor path="userName">\n          {value => <div>填写的姓名是：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(O={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},O.DefaultLayout=i.a,O._frontmatter=b,O),mdxType:"Playground"},(function(){var e=Object(u.a)({userName:"紫诺"});return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"姓名：",Object(o.b)(s.a,{as:"input",name:"userName",mdxType:"Field"}),Object(o.b)(m.a,{path:"userName",mdxType:"FormValueMonitor"},(function(e){return Object(o.b)("div",null,"填写的姓名是：",e)}))))})),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"FormValueMonitor"),"有多个用途，比如："),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"控制表单元素的只读"),Object(o.b)("li",{parentName:"ul"},"展现统计信息"),Object(o.b)("li",{parentName:"ul"},"控制 UI 元素的可见性")),Object(o.b)("h3",{id:"示例：控制表单元素的只读"},"示例：控制表单元素的只读"),Object(o.b)(l.c,{__position:5,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        是否可编辑：\n        <Field as="select" name="editable">\n          <option value="1">是</option>\n          <option value="0">否</option>\n        </Field>\n        姓名：\n        <FormValueMonitor path="editable">\n          {editable => (\n            <Field as="input" name="userNmae" readOnly={editable === \'0\'} />\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(j={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},j.DefaultLayout=i.a,j._frontmatter=b,j),mdxType:"Playground"},(function(){var e=Object(u.a)();return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"是否可编辑：",Object(o.b)(s.a,{as:"select",name:"editable",mdxType:"Field"},Object(o.b)("option",{value:"1"},"是"),Object(o.b)("option",{value:"0"},"否")),"姓名：",Object(o.b)(m.a,{path:"editable",mdxType:"FormValueMonitor"},(function(e){return Object(o.b)(s.a,{as:"input",name:"userNmae",readOnly:"0"===e,mdxType:"Field"})}))))})),Object(o.b)("h3",{id:"示例：展现统计信息"},"示例：展现统计信息"),Object(o.b)(l.c,{__position:6,__code:'() => {\n  const formState = useFormState()\n  const parseScore = score =>\n    score && !isNaN(parseInt(score)) ? parseInt(score) : 0\n  const countSelector = value =>\n    parseScore(value.chinese) +\n    parseScore(value.math) +\n    parseScore(value.english)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <h3>期末考试成绩</h3>\n        语文：\n        <Field as="input" type="number" name="chinese" />\n        数学：\n        <Field as="input" type="number" name="math" />\n        英语：\n        <Field as="input" type="number" name="english" />\n        <FormValueMonitor selector={countSelector}>\n          {value => <div>总分：{value}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(v={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},v.DefaultLayout=i.a,v._frontmatter=b,v),mdxType:"Playground"},(function(){var e=Object(u.a)(),n=function(e){return e&&!isNaN(parseInt(e))?parseInt(e):0};return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,Object(o.b)("h3",null,"期末考试成绩"),"语文：",Object(o.b)(s.a,{as:"input",type:"number",name:"chinese",mdxType:"Field"}),"数学：",Object(o.b)(s.a,{as:"input",type:"number",name:"math",mdxType:"Field"}),"英语：",Object(o.b)(s.a,{as:"input",type:"number",name:"english",mdxType:"Field"}),Object(o.b)(m.a,{selector:function(e){return n(e.chinese)+n(e.math)+n(e.english)},mdxType:"FormValueMonitor"},(function(e){return Object(o.b)("div",null,"总分：",e)}))))})),Object(o.b)("h3",{id:"示例：控制-ui-元素的可见性"},"示例：控制 UI 元素的可见性"),Object(o.b)(l.c,{__position:7,__code:'() => {\n  const formState = useFormState()\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        是否可见：\n        <Field as="select" name="visibility">\n          <option value="1">是</option>\n          <option value="0">否</option>\n        </Field>\n        姓名：\n        <FormValueMonitor path="visibility">\n          {visibility =>\n            visibility !== \'0\' ? <Field as="input" name="userNmae" /> : null\n          }\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(y={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},y.DefaultLayout=i.a,y._frontmatter=b,y),mdxType:"Playground"},(function(){var e=Object(u.a)();return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"是否可见：",Object(o.b)(s.a,{as:"select",name:"visibility",mdxType:"Field"},Object(o.b)("option",{value:"1"},"是"),Object(o.b)("option",{value:"0"},"否")),"姓名：",Object(o.b)(m.a,{path:"visibility",mdxType:"FormValueMonitor"},(function(e){return"0"!==e?Object(o.b)(s.a,{as:"input",name:"userNmae",mdxType:"Field"}):null}))))})),Object(o.b)("h2",{id:"表单域值关联"},"表单域值关联"),Object(o.b)("p",null,"上一节介绍的",Object(o.b)("inlineCode",{parentName:"p"},"FormValueMonitor"),"能展现表单的统计信息，但是如果需要将展现的表单统计信息也存储到表单值对象中，就可以采用表单域值关联。",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"api-field-component"}),"Field"),"有两个属性："),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"relyFields")," - 定义表单域值关联计算逻辑依赖的其他表单域名称"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"relyFn")," - 定义表单域值关联计算的逻辑。它是一个接收整个表单值的函数，它的返回值将会作为该表单域的值。")),Object(o.b)("p",null,"例如：",Object(o.b)("inlineCode",{parentName:"p"},"A = B + C"),"这样的一个表单域值关联关系，首先我们需要在表单域 A 上定义",Object(o.b)("inlineCode",{parentName:"p"},"relyFields"),"为",Object(o.b)("inlineCode",{parentName:"p"},"['B', 'C']"),"，这样当",Object(o.b)("inlineCode",{parentName:"p"},"B"),"或者",Object(o.b)("inlineCode",{parentName:"p"},"C"),"表单域值发生变更时，就会调用",Object(o.b)("inlineCode",{parentName:"p"},"A"),"表单域的",Object(o.b)("inlineCode",{parentName:"p"},"relyFn"),"属性。"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'function parseNumber(str) {\n  return str && !isNaN(parseInt(str)) ? parseInt(str) : 0;\n}\n\nfunction countA(values) {\n  const { B, C } = values;\n\n  return parseNumber(B) + parseNumber(C);\n}\n\n<Field name="A" as="input" type="number" relyFields={["B", "C"]} relyFn={countA} />\n<Field name="B" as="input" type="number" />\n<Field name="C" as="input" type="number" />\n')),Object(o.b)("p",null,"演示效果如下："),Object(o.b)(l.c,{__position:8,__code:'() => {\n  const formState = useFormState()\n  function parseNumber(str) {\n    return str && !isNaN(parseInt(str)) ? parseInt(str) : 0\n  }\n  function countA(values) {\n    const { B, C } = values\n    return parseNumber(B) + parseNumber(C)\n  }\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <h3>表单域值关联：A = B + C</h3>\n        A：\n        <Field\n          name="A"\n          as="input"\n          type="number"\n          relyFields={[\'B\', \'C\']}\n          relyFn={countA}\n        />\n        B：\n        <Field name="B" as="input" type="number" />\n        C：\n        <Field name="C" as="input" type="number" />\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(N={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},N.DefaultLayout=i.a,N._frontmatter=b,N),mdxType:"Playground"},(function(){var e=Object(u.a)();function n(e){return e&&!isNaN(parseInt(e))?parseInt(e):0}return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,Object(o.b)("h3",null,"表单域值关联：A = B + C"),"A：",Object(o.b)(s.a,{name:"A",as:"input",type:"number",relyFields:["B","C"],relyFn:function(e){var t=e.B,a=e.C;return n(t)+n(a)},mdxType:"Field"}),"B：",Object(o.b)(s.a,{name:"B",as:"input",type:"number",mdxType:"Field"}),"C：",Object(o.b)(s.a,{name:"C",as:"input",type:"number",mdxType:"Field"})))})),Object(o.b)("h2",{id:"全局值关联"},"全局值关联"),Object(o.b)("p",null,"有时候，表单域值关联无法满足值关联的需求，比如",Object(o.b)("inlineCode",{parentName:"p"},"A = B + C"),"，而",Object(o.b)("inlineCode",{parentName:"p"},"A"),"不是一个可见的表单域元素。这时可以用一下全局值关联"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\n// A = B + C\nconst abcRely = [\n  'B',\n  'C',\n  (draft) => {\n    if (draft.B && draft.C) {\n      draft.A = draft.B + draft.C;\n    }\n  },\n];\n\n// E = D\nconst deRely = [\n  'D',\n  (draft) => {\n    draft.E = draft.D;\n  },\n];\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺' };\n  const formState = useFormState(initialValues, {\n    relys: [abcRely, deRely],\n  });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        B：\n        <Field as=\"input\" name=\"B\" />\n        C：\n        <Field as=\"input\" name=\"C\" />\n        D:\n        <Field as=\"input\" name=\"D\" />\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(o.b)("p",null,"效果如下："),Object(o.b)(l.c,{__position:9,__code:'() => {\n  // A = B + C\n  const abcRely = [\n    \'B\',\n    \'C\',\n    draft => {\n      if (draft.B && draft.C) {\n        draft.A = draft.B + draft.C\n      }\n    },\n  ]\n  // E = D\n  const deRely = [\n    \'D\',\n    draft => {\n      draft.E = draft.D\n    },\n  ]\n  const formState = useFormState(\n    {},\n    {\n      relys: [abcRely, deRely],\n    },\n  )\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        B：\n        <Field as="input" name="B" />\n        C：\n        <Field as="input" name="C" />\n        D:\n        <Field as="input" name="D" />\n        <FormValueMonitor>\n          {values => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(S={props:x,DefaultLayout:i.a,Playground:l.c,useFormState:u.a,FormValueMonitor:m.a,Field:s.a,FormStateContext:c.a},S.DefaultLayout=i.a,S._frontmatter=b,S),mdxType:"Playground"},(function(){var e=Object(u.a)({},{relys:[["B","C",function(e){e.B&&e.C&&(e.A=e.B+e.C)}],["D",function(e){e.E=e.D}]]});return Object(o.b)(c.a.Provider,{value:e},Object(o.b)("form",null,"B：",Object(o.b)(s.a,{as:"input",name:"B",mdxType:"Field"}),"C：",Object(o.b)(s.a,{as:"input",name:"C",mdxType:"Field"}),"D:",Object(o.b)(s.a,{as:"input",name:"D",mdxType:"Field"}),Object(o.b)(m.a,{mdxType:"FormValueMonitor"},(function(e){return Object(o.b)("div",null,"表单值：",JSON.stringify(e,void 0,2))}))))})),Object(o.b)("h2",{id:"设置表单域的值"},"设置表单域的值"),Object(o.b)("p",null,"当你需要在",Object(o.b)("inlineCode",{parentName:"p"},"Field"),"组件之外设置个别表单域的值，你可以调用",Object(o.b)("inlineCode",{parentName:"p"},"formState.setFieldValue"),"函数。如下所示："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const initialValues = { userName: '紫诺' };\n  const formState = useFormState(initialValues);\n\n  const handleClick = () => {\n    formState.setFieldValue('userName', '张三');\n  };\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        <button onClick={handleClick}>将姓名变更为张三</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(o.b)("h2",{id:"设置整个表单值"},"设置整个表单值"),Object(o.b)("p",null,"表单的初始值有可能需要通过 Ajax 从服务器端加载到。例如："),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  Field,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/web-forms';\nimport useRestItemApi from '@sinoui/use-rest-item-api';\n\nfunction FormDemo() {\n  const dataSource = useRestItemApi('/users', '1');\n  const formState = useFormState(dataSource.data);\n\n  const handleClick = () => {\n    formState.setFieldValue('userName', '张三');\n  };\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        姓名：\n        <Field as=\"input\" name=\"userName\" />\n        <button onClick={handleClick}>将姓名变更为张三</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")))}void 0!==F&&F&&F===Object(F)&&Object.isExtensible(F)&&!F.hasOwnProperty("__filemeta")&&Object.defineProperty(F,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/form-values.mdx"}}),F.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-form-values-mdx-a97e8563e3bd5e106b91.js.map