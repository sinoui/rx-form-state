{"version":3,"sources":["webpack:///../docs/form-validate.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","set","Field","useFormState","useFieldTouched","useFieldError","FormStateContext","FieldError","formState","Provider","value","htmlFor","id","as","name","required","type","minLength","maxLength","pattern","patternErrorMessage","validate","values","test","asyncValidate","Promise","resolve","setTimeout","error","userName","password","length","address","city","street","endsWith","onSubmit","code","msg","then","result","setAsyncErrors","alert","event","preventDefault","submit","console","log","isMDXComponent"],"mappings":"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","file":"component---docs-form-validate-mdx-a5e67fec894b3bb4d1cb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/personal/githubrepo/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { set } from 'lodash';\nimport { Field, useFormState, useFieldTouched, useFieldError, FormStateContext } from '../src';\nimport FieldError from './FieldError';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"表单校验\"\n    }}>{`表单校验`}</h1>\n    <p>{`表单校验是 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sinoui/rx-form-state\"\n      }}>{`@sinoui/rx-form-state`}</a>{` 一个很重要的功能。这里我们将从以下几个方面来探讨表单校验的使用：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`内置校验(针对表单域)`}</li>\n      <li parentName=\"ul\">{`自定义表单域校验`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`同步校验`}</li>\n          <li parentName=\"ul\">{`异步校验`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`全局表单校验(表单级别校验)`}</li>\n      <li parentName=\"ul\">{`嵌套表单校验`}</li>\n      <li parentName=\"ul\">{`自定义校验错误`}</li>\n    </ul>\n    <p>{`表单校验的时机为：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`表单域值发生改变时`}</li>\n      <li parentName=\"ul\">{`表单域失去焦点时`}</li>\n      <li parentName=\"ul\">{`表单提交之前`}</li>\n    </ul>\n    <p>{`注意：表单域的异步校验只会在表单域同步校验没有错误时才触发。`}</p>\n    <p>{`表单校验的显示时机为：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`表单校验错误存在`}</li>\n      <li parentName=\"ul\">{`表单域的`}<inlineCode parentName=\"li\">{`isTouched`}</inlineCode>{`状态为`}<inlineCode parentName=\"li\">{`true`}</inlineCode></li>\n    </ul>\n    <p>{`一般同时满足上述两个条件，页面才能正确显示表单校验信息。`}</p>\n    <h2 {...{\n      \"id\": \"内置校验\"\n    }}>{`内置校验`}</h2>\n    <p>{`针对表单域的校验，我们内部实现了一些校验规则，在使用时只需指定对应的属性即可。内置校验主要有以下几个：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`required 必填校验`}</li>\n      <li parentName=\"ul\">{`trimRequired 去掉首尾空白符之后的必填校验`}</li>\n      <li parentName=\"ul\">{`min 指定数值，做最小值校验`}</li>\n      <li parentName=\"ul\">{`max 指定数值，做最大值校验`}</li>\n      <li parentName=\"ul\">{`maxLength 指定数值，做字符串最大长度校验`}</li>\n      <li parentName=\"ul\">{`minLength 指定数值，做字符串最小长度校验`}</li>\n      <li parentName=\"ul\">{`pattern 正则校验`}</li>\n      <li parentName=\"ul\">{`patternErrorMessage 正则校验失败的错误信息`}</li>\n    </ul>\n    <p>{`使用方式：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Field as=\"input\" name=\"userName\" required />\n<Field as=\"input\" name=\"password\" type=\"password\" minLength={8}/>\n<Field as=\"input\" name=\"telephone\" type=\"number\" maxLength={11}/>\n<Field as=\"input\" name=\"email\" pattern=\"[a-zA-Z0-9]+@[a-zA-Z0-9]+\\\\.[a-zA-Z0-9]+\" patternErrorMessage=\"邮箱格式不正确\"/>\n`}</code></pre>\n    <p>{`Field 组件不负责展现表单校验错误，我们可以封装一个组件，用来呈现指定表单项的校验错误信息：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { useFieldTouched, useFieldError } from '@sinoui/rx-form-state';\n\nfunction FieldError({ name }) {\n  const isTouched = useFieldTouched(name);\n  const errorMessage = useFieldError(name);\n\n  return isTouched && errorMessage ? (\n    <div style={{ color: 'red' }}>{errorMessage}</div>\n  ) : null;\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label htmlFor=\\\"userName\\\">用户名</label>\\n          <Field id=\\\"userName\\\" as=\\\"input\\\" name=\\\"userName\\\" required />\\n          <FieldError name=\\\"userName\\\" />\\n        </div>\\n        <div>\\n          <label>密码</label>\\n          <Field as=\\\"input\\\" name=\\\"password\\\" type=\\\"password\\\" minLength={8} />\\n          <FieldError name=\\\"password\\\" />\\n        </div>\\n        <div>\\n          <label>联系方式</label>\\n          <Field as=\\\"input\\\" name=\\\"telephone\\\" type=\\\"number\\\" maxLength={11} />\\n          <FieldError name=\\\"telephone\\\" />\\n        </div>\\n        <div>\\n          <label>邮箱</label>\\n          <Field\\n            as=\\\"input\\\"\\n            name=\\\"email\\\"\\n            pattern=\\\"[a-zA-Z0-9]+@[a-zA-Z0-9]+\\\\.[a-zA-Z0-9]+\\\"\\n            patternErrorMessage=\\\"邮箱格式不正确\\\"\\n          />\\n          <FieldError name=\\\"email\\\" />\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      Field,\n      useFormState,\n      useFieldTouched,\n      useFieldError,\n      FormStateContext,\n      FieldError,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label htmlFor=\"userName\">用户名</label>\n            <Field id=\"userName\" as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n            <FieldError name=\"userName\" mdxType=\"FieldError\" />\n          </div>\n          <div>\n            <label>密码</label>\n            <Field as=\"input\" name=\"password\" type=\"password\" minLength={8} mdxType=\"Field\" />\n            <FieldError name=\"password\" mdxType=\"FieldError\" />\n          </div>\n          <div>\n            <label>联系方式</label>\n            <Field as=\"input\" name=\"telephone\" type=\"number\" maxLength={11} mdxType=\"Field\" />\n            <FieldError name=\"telephone\" mdxType=\"FieldError\" />\n          </div>\n          <div>\n            <label>邮箱</label>\n            <Field as=\"input\" name=\"email\" pattern=\"[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\" patternErrorMessage=\"邮箱格式不正确\" mdxType=\"Field\" />\n            <FieldError name=\"email\" mdxType=\"FieldError\" />\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"表单域校验\"\n    }}>{`表单域校验`}</h2>\n    <h3 {...{\n      \"id\": \"自定义表单域校验同步校验\"\n    }}>{`自定义表单域校验(同步校验)`}</h3>\n    <p>{`当内置校验不满足需求时，我们可以给`}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`组件指定一个`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`属性做表单域同步校验。例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function validate(value, values) {\n  if (value) {\n    if (/^\\\\d/.test(value)) {\n      return '不能以数字开头';\n    }\n  }\n}\n\n<Field as=\"input\" name=\"userName\" required validate={validate} />;\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  function validate(value, values) {\\n    if (value) {\\n      if (/^\\\\d/.test(value)) {\\n        return \\'不能以数字开头\\'\\n      }\\n    }\\n  }\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label htmlFor=\\\"userName\\\">用户名</label>\\n          <Field\\n            id=\\\"userName\\\"\\n            as=\\\"input\\\"\\n            name=\\\"userName\\\"\\n            required\\n            validate={validate}\\n          />\\n          <FieldError name=\\\"userName\\\" />\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      Field,\n      useFormState,\n      useFieldTouched,\n      useFieldError,\n      FormStateContext,\n      FieldError,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(value, values) {\n          if (value) {\n            if (/^\\d/.test(value)) {\n              return '不能以数字开头';\n            }\n          }\n        }\n\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label htmlFor=\"userName\">用户名</label>\n            <Field id=\"userName\" as=\"input\" name=\"userName\" required validate={validate} mdxType=\"Field\" />\n            <FieldError name=\"userName\" mdxType=\"FieldError\" />\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"自定义表单域校验（异步校验）\"\n    }}>{`自定义表单域校验（异步校验）`}</h3>\n    <p>{`异步校验只适用于表单域校验，在表单校验时，同一个表单域只有同步校验没有错误时才会触发该表单域的异步校验。\n自定义表单域的异步校验只需要给`}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{`组件指定`}<inlineCode parentName=\"p\">{`asyncValidate`}</inlineCode>{`属性即可。例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import http from '@sinoui/http';\n\nfunction asyncValidateFn(value, values) {\n  return http.get(\\`/test/validate/\\`, { params: { value, values } });\n}\n\n<Field as=\"input\" name=\"userName\" required asyncValidate={asyncValidateFn} />;\n`}</code></pre>\n    <p>{`运行效果(使用 setTimeout 模拟异步校验)：`}</p>\n    <Playground __position={2} __code={'() => {\\n  function asyncValidateFn(value, values) {\\n    return new Promise(resolve => {\\n      setTimeout(() => resolve(\\'该用户已被注销\\'), 500)\\n    })\\n  }\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>用户名</label>\\n          <Field\\n            as=\\\"input\\\"\\n            name=\\\"userName\\\"\\n            required\\n            asyncValidate={asyncValidateFn}\\n          />\\n          <FieldError name=\\\"userName\\\" />\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      Field,\n      useFormState,\n      useFieldTouched,\n      useFieldError,\n      FormStateContext,\n      FieldError,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        function asyncValidateFn(value, values) {\n          return new Promise(resolve => {\n            setTimeout(() => resolve('该用户已被注销'), 500);\n          });\n        }\n\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" name=\"userName\" required asyncValidate={asyncValidateFn} mdxType=\"Field\" />\n            <FieldError name=\"userName\" mdxType=\"FieldError\" />\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"全局校验表单级别的校验\"\n    }}>{`全局校验(表单级别的校验)`}</h2>\n    <p>{`所谓全局校验，就是在表单级别对整个表单进行校验。我们只需要在使用`}<inlineCode parentName=\"p\">{`useFormState`}</inlineCode>{`时，给第二个参数对象指定`}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{`方法即可。`}</p>\n    <p>{`使用方式：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  FormItem,\n  Label,\n  Field,\n  FormStateErrors,\n} from '@sinoui/rx-form-state';\n\nfunction validate(values) {\n  let error: FormStateErrors = {};\n\n  if (values.userName) {\n    if (/^\\\\d/.test(values.userName)) {\n      error['userName'] = '不能以数字开头';\n    }\n  }\n\n  if (values.password && values.password.length < 8) {\n    error['password'] = '至少为8个字符';\n  }\n  return error;\n}\n\nfunction FormDemo() {\n  const formState = useFormState({}, { validate });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label htmlFor=\"userName\">用户名</label>\n          <Field id=\"userName\" as=\"input\" name=\"userName\" required />\n          <FieldError name=\"userName\" />\n        </div>\n        <div>\n          <label htmlFor=\"password\">密码</label>\n          <Field\n            id=\"password\"\n            as=\"input\"\n            name=\"password\"\n            type=\"password\"\n            required\n          />\n          <FieldError name=\"password\" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={3} __code={'() => {\\n  function validate(values) {\\n    let error = {}\\n    if (values.userName) {\\n      if (/^\\\\d/.test(values.userName)) {\\n        error[\\'userName\\'] = \\'不能以数字开头\\'\\n      }\\n    }\\n    if (values.password && values.password.length < 8) {\\n      error[\\'password\\'] = \\'至少为8个字符\\'\\n    }\\n    return error\\n  }\\n  const formState = useFormState({}, { validate })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label htmlFor=\\\"userName\\\">用户名</label>\\n          <Field id=\\\"userName\\\" as=\\\"input\\\" name=\\\"userName\\\" required />\\n          <FieldError name=\\\"userName\\\" />\\n        </div>\\n        <div>\\n          <label htmlFor=\\\"password\\\">密码</label>\\n          <Field\\n            id=\\\"password\\\"\\n            as=\\\"input\\\"\\n            name=\\\"password\\\"\\n            type=\\\"password\\\"\\n            required\\n          />\\n          <FieldError name=\\\"password\\\" />\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      Field,\n      useFormState,\n      useFieldTouched,\n      useFieldError,\n      FormStateContext,\n      FieldError,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(values) {\n          let error = {};\n\n          if (values.userName) {\n            if (/^\\d/.test(values.userName)) {\n              error['userName'] = '不能以数字开头';\n            }\n          }\n\n          if (values.password && values.password.length < 8) {\n            error['password'] = '至少为8个字符';\n          }\n\n          return error;\n        }\n\n        const formState = useFormState({}, {\n          validate\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label htmlFor=\"userName\">用户名</label>\n            <Field id=\"userName\" as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n            <FieldError name=\"userName\" mdxType=\"FieldError\" />\n          </div>\n          <div>\n            <label htmlFor=\"password\">密码</label>\n            <Field id=\"password\" as=\"input\" name=\"password\" type=\"password\" required mdxType=\"Field\" />\n            <FieldError name=\"password\" mdxType=\"FieldError\" />\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"嵌套表单校验\"\n    }}>{`嵌套表单校验`}</h2>\n    <p>{`嵌套表单的表单域校验方式跟上述提到的`}<a parentName=\"p\" {...{\n        \"href\": \"#%E5%86%85%E7%BD%AE%E6%A0%A1%E9%AA%8C\"\n      }}>{`内置校验`}</a>{`和`}<a parentName=\"p\" {...{\n        \"href\": \"#%E8%A1%A8%E5%8D%95%E5%9F%9F%E6%A0%A1%E9%AA%8C\"\n      }}>{`表单域校验`}</a>{`的校验方式和用法一致，这里不再重复描述。`}</p>\n    <p>{`嵌套表单的全局校验需要特别注意返回值的数据结构。`}</p>\n    <p>{`基本用法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  FormItem,\n  Label,\n  Field,\n  FormStateErrors,\n} from '@sinoui/rx-form-state';\n\nfunction validate(values) {\n  let error: FormStateErrors = { address: {} };\n\n  if (values.address && values.address.city) {\n    if (/^\\\\d/.test(values.address.city)) {\n      error.address['city'] = '不能以数字开头';\n    }\n  }\n\n  if (values.address && values.address.street) {\n    if (!values.address.street.endsWith('号')) {\n      error.address['street'] = '请具体到街道编号';\n    }\n  }\n  return error;\n}\n\nfunction FormDemo() {\n  const formState = useFormState({}, { validate });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <label>地址</label>\n        <div>\n          <label htmlFor=\"address.city\">城市</label>\n          <Field id=\"address.city\" as=\"input\" name=\"address.city\" required />\n          <FieldError name=\"address.city\" />\n        </div>\n        <div>\n          <label htmlFor=\"address.street\">街道</label>\n          <Field\n            id=\"address.street\"\n            as=\"input\"\n            name=\"address.street\"\n            required\n          />\n          <FieldError name=\"address.street\" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`上述校验方法设置错误状态时，可以借助`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.lodashjs.com/docs/latest#_setobject-path-value\"\n      }}>{`lodash | set`}</a>{`实现,例如：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { set } from 'lodash';\n\nfunction validate(values) {\n  let error = {};\n\n  if (values.address && values.address.city) {\n    if (/^\\\\d/.test(values.address.city)) {\n      set(error, ['address', 'city'], '不能以数字开头');\n    }\n  }\n\n  if (values.address && values.address.street) {\n    if (!values.address.street.endsWith('号')) {\n      set(error, ['address', 'street'], '请具体到街道编号');\n    }\n  }\n  return error;\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={4} __code={'() => {\\n  function validate(values) {\\n    let error = {}\\n    if (values.address && values.address.city) {\\n      if (/^\\\\d/.test(values.address.city)) {\\n        set(error, [\\'address\\', \\'city\\'], \\'不能以数字开头\\')\\n      }\\n    }\\n    if (values.address && values.address.street) {\\n      if (!values.address.street.endsWith(\\'号\\')) {\\n        set(error, [\\'address\\', \\'street\\'], \\'请具体到街道编号\\')\\n      }\\n    }\\n    return error\\n  }\\n  const formState = useFormState({}, { validate })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <label>地址</label>\\n        <div>\\n          <label htmlFor=\\\"address.city\\\">城市</label>\\n          <Field id=\\\"address.city\\\" as=\\\"input\\\" name=\\\"address.city\\\" required />\\n          <FieldError name=\\\"address.city\\\" />\\n        </div>\\n        <div>\\n          <label htmlFor=\\\"address.street\\\">街道</label>\\n          <Field\\n            id=\\\"address.street\\\"\\n            as=\\\"input\\\"\\n            name=\\\"address.street\\\"\\n            required\\n          />\\n          <FieldError name=\\\"address.street\\\" />\\n        </div>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      Field,\n      useFormState,\n      useFieldTouched,\n      useFieldError,\n      FormStateContext,\n      FieldError,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        function validate(values) {\n          let error = {};\n\n          if (values.address && values.address.city) {\n            if (/^\\d/.test(values.address.city)) {\n              set(error, ['address', 'city'], '不能以数字开头');\n            }\n          }\n\n          if (values.address && values.address.street) {\n            if (!values.address.street.endsWith('号')) {\n              set(error, ['address', 'street'], '请具体到街道编号');\n            }\n          }\n\n          return error;\n        }\n\n        const formState = useFormState({}, {\n          validate\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <label>地址</label>\n          <div>\n            <label htmlFor=\"address.city\">城市</label>\n            <Field id=\"address.city\" as=\"input\" name=\"address.city\" required mdxType=\"Field\" />\n            <FieldError name=\"address.city\" mdxType=\"FieldError\" />\n          </div>\n          <div>\n            <label htmlFor=\"address.street\">街道</label>\n            <Field id=\"address.street\" as=\"input\" name=\"address.street\" required mdxType=\"Field\" />\n            <FieldError name=\"address.street\" mdxType=\"FieldError\" />\n          </div>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置校验错误\"\n    }}>{`设置校验错误`}</h2>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{`中主要提供四个设置校验错误的方法：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`setFieldError 设置表单域错误`}</li>\n      <li parentName=\"ul\">{`setFieldAsyncError 设置表单域的异步错误`}</li>\n      <li parentName=\"ul\">{`setErrors 设置表单校验错误`}</li>\n      <li parentName=\"ul\">{`setAsyncErrors 设置异步校验错误`}</li>\n    </ul>\n    <p>{`我们以表单提交时返回的验证错误需要反写在表单域上为例，简单说明自定义校验错误的使用方式。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { useFormState, FormItem, Label, Field } from '@sinoui/rx-form-state';\nimport http from '@sinoui/http';\n\nfunction FormDemo() {\n  const onSubmit = (values) => {\n    http.post('/api/test/form', values).then((result) => {\n      if (result.code === '501') {\n        formState.setAsyncErrors(result.msg);\n      }\n    });\n  };\n  const formState = useFormState({}, { onSubmit });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          formState.submit();\n        }}\n      >\n        <div>\n          <label htmlFor=\"userName\">用户名</label>\n          <Field id=\"userName\" as=\"input\" name=\"userName\" required />\n          <FieldError name=\"userName\" />\n        </div>\n        <div>\n          <label>密码</label>\n          <Field as=\"input\" name=\"password\" type=\"password\" required />\n          <FieldError name=\"password\" />\n        </div>\n        <button type=\"submit\">登录</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：(使用 setTimeout 模拟表单提交的响应)`}</p>\n    <Playground __position={5} __code={'() => {\\n  const handleReponse = () => {\\n    return new Promise(resolve => {\\n      setTimeout(\\n        () => resolve({ code: \\'501\\', msg: { password: \\'密码错误\\' } }),\\n        500,\\n      )\\n    })\\n  }\\n  const onSubmit = values => {\\n    handleReponse().then(\\n      result => {\\n        if (result.code === \\'501\\') {\\n          formState.setAsyncErrors(result.msg)\\n          alert(\\'表单提交失败\\')\\n        } else {\\n          alert(\\'表单提交成功\\')\\n        }\\n      },\\n      () => {\\n        alert(\\'表单提交失败\\')\\n      },\\n    )\\n  }\\n  const formState = useFormState({}, { onSubmit })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form\\n        onSubmit={event => {\\n          event.preventDefault()\\n          formState.submit().then(\\n            () => {\\n              console.log(\\'表单校验成功\\')\\n            },\\n            () => {\\n              console.log(\\'表单校验失败\\')\\n            },\\n          )\\n        }}\\n      >\\n        <div>\\n          <label htmlFor=\\\"userName\\\">用户名</label>\\n          <Field id=\\\"userName\\\" as=\\\"input\\\" name=\\\"userName\\\" required />\\n          <FieldError name=\\\"userName\\\" />\\n        </div>\\n        <div>\\n          <label>密码</label>\\n          <Field as=\\\"input\\\" name=\\\"password\\\" type=\\\"password\\\" required />\\n          <FieldError name=\\\"password\\\" />\\n        </div>\\n        <button type=\\\"submit\\\">登录</button>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      Field,\n      useFormState,\n      useFieldTouched,\n      useFieldError,\n      FormStateContext,\n      FieldError,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const handleReponse = () => {\n          return new Promise(resolve => {\n            setTimeout(() => resolve({\n              code: '501',\n              msg: {\n                password: '密码错误'\n              }\n            }), 500);\n          });\n        };\n\n        const onSubmit = values => {\n          handleReponse().then(result => {\n            if (result.code === '501') {\n              formState.setAsyncErrors(result.msg);\n              alert('表单提交失败');\n            } else {\n              alert('表单提交成功');\n            }\n          }, () => {\n            alert('表单提交失败');\n          });\n        };\n\n        const formState = useFormState({}, {\n          onSubmit\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form onSubmit={event => {\n            event.preventDefault();\n            formState.submit().then(() => {\n              console.log('表单校验成功');\n            }, () => {\n              console.log('表单校验失败');\n            });\n          }}>\n          <div>\n            <label htmlFor=\"userName\">用户名</label>\n            <Field id=\"userName\" as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n            <FieldError name=\"userName\" mdxType=\"FieldError\" />\n          </div>\n          <div>\n            <label>密码</label>\n            <Field as=\"input\" name=\"password\" type=\"password\" required mdxType=\"Field\" />\n            <FieldError name=\"password\" mdxType=\"FieldError\" />\n          </div>\n          <button type=\"submit\">登录</button>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p>{`特别注意：这里我们不建议使用`}<inlineCode parentName=\"p\">{`setErrors`}</inlineCode>{`方法设置表单校验错误，因为只要我们再次触发表单校验，自定义的表单校验错误就会被覆盖。`}</p>\n    <h2 {...{\n      \"id\": \"执行表单校验\"\n    }}>{`执行表单校验`}</h2>\n    <p>{`为不同场景设计了不同方法，来满足表单校验的执行。这些场景包括：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`场景一：表单域失去焦点自动校验`}</li>\n      <li parentName=\"ul\">{`场景二：表单提交时整体校验`}</li>\n      <li parentName=\"ul\">{`场景三：校验个别表单域`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"场景一：表单域失去焦点自动校验\"\n    }}>{`场景一：表单域失去焦点自动校验`}</h3>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{` 提供了 `}<inlineCode parentName=\"p\">{`blur(fieldName: string)]()`}</inlineCode>{` 方法，监听表单域控件的 `}<inlineCode parentName=\"p\">{`onBlur`}</inlineCode>{` 事件，调用此方法即可完成表单域失去焦点自动校验。 `}<a parentName=\"p\" {...{\n        \"href\": \"./api-field-component\"\n      }}>{`Field`}</a>{` 组件已经内置了此规则。`}</p>\n    <h3 {...{\n      \"id\": \"场景二：表单提交时整体校验\"\n    }}>{`场景二：表单提交时整体校验`}</h3>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{` 的 `}<inlineCode parentName=\"p\">{`submit()`}</inlineCode>{` 方法会自动校验整个表单。除此之外，还提供了 `}<inlineCode parentName=\"p\">{`validate()`}</inlineCode>{` 方法，做表单整体校验，如果表单校验失败，则返回 `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`，否则返回 `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`if (!formState.validate()) {\n  console.log('表单校验失败');\n} else {\n  submitForm();\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"场景三：校验个别表单域\"\n    }}>{`场景三：校验个别表单域`}</h3>\n    <p><inlineCode parentName=\"p\">{`formState`}</inlineCode>{` 提供了 `}<inlineCode parentName=\"p\">{`validateFields(...fieldNames: string[]): Promise<boolean>`}</inlineCode>{` 方法，用来校验多个表单域的。这个方法只会校验指定表单域，不会校验整个表单。如保存表单时只校验个别字段：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`async function save() {\n  const isValid = await formState.validateFields('userName', 'title'); // 同时校验 userName 和 title 表单域\n  if (isValid) {\n    const result = await callSaveApi(formState.values);\n  } else {\n    console.log('表单校验失败');\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"获取表单校验状态\"\n    }}>{`获取表单校验状态`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`console.log(formState.isValid);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}