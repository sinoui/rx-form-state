(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{j5at:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return O})),t.d(n,"default",(function(){return f}));var a=t("Fcif"),o=t("+I+c"),l=(t("mXGw"),t("/FXl")),i=t("TjRS"),r=t("ZFoC"),u=t("xIpy"),b=t("JDL0"),m=t("gLhC"),c=t("jwAI"),p=t("IUht"),d=t("hh+d"),s=t("inP9"),j=t("dU6M"),O=(t("aD51"),{});void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!O.hasOwnProperty("__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/custom-field.mdx"}});var v={_frontmatter:O},F=i.a;function f(e){var n,t,f,C,x=e.components,N=Object(o.a)(e,["components"]);return Object(l.b)(F,Object(a.a)({},v,N,{components:x,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"自定义表单域"},"自定义表单域"),Object(l.b)("p",null,"使用",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"rx-form-state"}),"@sinoui/rx-form-state"),"做表单状态管理时，我们可以通过以下三种方式自定义表单域："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"使用",Object(l.b)("inlineCode",{parentName:"li"},"Field"),"组件的",Object(l.b)("inlineCode",{parentName:"li"},"as"),"属性"),Object(l.b)("li",{parentName:"ul"},"使用",Object(l.b)("inlineCode",{parentName:"li"},"Field"),"组件的",Object(l.b)("inlineCode",{parentName:"li"},"render"),"属性"),Object(l.b)("li",{parentName:"ul"},"使用",Object(l.b)("inlineCode",{parentName:"li"},"useField"),"的 hook")),Object(l.b)("h2",{id:"使用-field-的-as-属性自定义表单域"},"使用 Field 的 as 属性自定义表单域"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("inlineCode",{parentName:"li"},"as"),"属性可以接收多种类型的组件，如",Object(l.b)("inlineCode",{parentName:"li"},"select"),"、",Object(l.b)("inlineCode",{parentName:"li"},"TextInput"),"、",Object(l.b)("inlineCode",{parentName:"li"},"Datepicker"),"等"),Object(l.b)("li",{parentName:"ol"},Object(l.b)("inlineCode",{parentName:"li"},"Field"),"组件可以接收",Object(l.b)("inlineCode",{parentName:"li"},"as"),"对应组件的属性，并传递给 as 属性对应的组件，比如",Object(l.b)("inlineCode",{parentName:"li"},"readOnly"),"、",Object(l.b)("inlineCode",{parentName:"li"},"disabled"),"等")),Object(l.b)("p",null,"基本用法:"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Select.tsx")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport { Field } from '@sinoui/rx-form-state';\n\nexport default function Select(props) {\n  return <Field as=\"select\" {...props} />;\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"FormDemo.tsx")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport {\n  useFormState,\n  FormStateContext\n  Field,\n} from \'@sinoui/rx-form-state\';\n\nfunction FormDemo() {\n  const formState = useFormState({ city: \'北京\' });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n    <form>\n      <div>\n        <label>用户名</label>\n        <Field name="userName" as="input" required />\n      </div>\n      <div>\n        <label>所在城市</label>\n        <Select name="city" required style={{ width: 160 }}>\n          <option value="北京">北京</option>\n          <option value="上海">上海</option>\n          <option value="广州">广州</option>\n          <option value="深圳">深圳</option>\n        </Select>\n      </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(l.b)("p",null,"运行效果："),Object(l.b)(r.c,{__position:0,__code:'() => {\n  const formState = useFormState({ city: \'北京\' })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field name="userName" as="input" required />\n        </div>\n        <div>\n          <label>所在城市</label>\n          <Field name="city" as="select" required style={{ width: 160 }}>\n            <option value="北京">北京</option>\n            <option value="上海">上海</option>\n            <option value="广州">广州</option>\n            <option value="深圳">深圳</option>\n          </Field>\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(n={props:N,DefaultLayout:i.a,Playground:r.c,useFormState:u.a,FormValueMonitor:b.a,useField:m.a,useFieldValue:c.a,FormStateContext:p.a,Field:d.a,CustomFormFieldDemo:s.a,CustomCheckboxGroupDemo:j.a},n.DefaultLayout=i.a,n._frontmatter=O,n),mdxType:"Playground"},(function(){var e=Object(u.a)({city:"北京"});return Object(l.b)(p.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("div",null,Object(l.b)("label",null,"用户名"),Object(l.b)(d.a,{name:"userName",as:"input",required:!0,mdxType:"Field"})),Object(l.b)("div",null,Object(l.b)("label",null,"所在城市"),Object(l.b)(d.a,{name:"city",as:"select",required:!0,style:{width:160},mdxType:"Field"},Object(l.b)("option",{value:"北京"},"北京"),Object(l.b)("option",{value:"上海"},"上海"),Object(l.b)("option",{value:"广州"},"广州"),Object(l.b)("option",{value:"深圳"},"深圳")))))})),Object(l.b)("p",null,"使用",Object(l.b)("inlineCode",{parentName:"p"},"as"),"属性有局限性。它不适用于以下三个场景："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"一次性设置多个表单域的值"),Object(l.b)("li",{parentName:"ul"},"自定义的表单域值依赖于多个表单域的值"),Object(l.b)("li",{parentName:"ul"},"表单域值需要做二次处理才能指定给表单域控件")),Object(l.b)("p",null,"这些场景可以通过",Object(l.b)("inlineCode",{parentName:"p"},"Field"),"的",Object(l.b)("inlineCode",{parentName:"p"},"render"),"属性自定义表单域实现。"),Object(l.b)("h2",{id:"使用-field-的-render-属性自定义表单域"},"使用 Field 的 render 属性自定义表单域"),Object(l.b)("p",null,"我们使用",Object(l.b)("inlineCode",{parentName:"p"},"Field"),"组件的",Object(l.b)("inlineCode",{parentName:"p"},"render"),"属性自定义一个可以同时设置多个表单域值的表单域，",Object(l.b)("inlineCode",{parentName:"p"},"render"),"方法中有一个",Object(l.b)("inlineCode",{parentName:"p"},"formState"),"对象，当表单域值发生变化时，依次调用",Object(l.b)("inlineCode",{parentName:"p"},"formState.setFieldValue()"),"方法可以设置多个表单域的值。"),Object(l.b)("p",null,"基本用法："),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import React from \'react\';\nimport {\n  Field,\n  useFormState,\n  FormValueMonitor,\n  FormStateContext,\n} from \'@sinoui/rx-form-state\';\n\nfunction FormDemo() {\n  const formState = useFormState({});\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>公文标题</label>\n          <Field as="input" name="title" />\n        </div>\n        <div>\n          <label>紧急程度</label>\n          <Field\n            name="jjcdNum"\n            render={({ formState, fieldProps }) => {\n              return (\n                <select\n                  {...fieldProps}\n                  style={{ width: 160 }}\n                  onChange={(event) => {\n                    formState.setFieldValue(\'jjcdNum\', event.target.value);\n                    formState.setFieldValue(\n                      \'jjcd\',\n                      event.target.selectedOptions[0].label,\n                    );\n                  }}\n                >\n                  <option value="001">急</option>\n                  <option value="002">特急</option>\n                  <option value="003">限时</option>\n                  <option value="004">特提</option>\n                </select>\n              );\n            }}\n          />\n        </div>\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(l.b)("p",null,"运行效果："),Object(l.b)(r.c,{__position:1,__code:'() => {\n  const formState = useFormState({ jjcdNum: \'002\' })\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>公文标题</label>\n          <Field as="input" name="title" />\n        </div>\n        <div>\n          <label>紧急程度</label>\n          <Field\n            name="jjcdNum"\n            render={({ formState, fieldProps }) => {\n              return (\n                <select\n                  {...fieldProps}\n                  style={{ width: 160 }}\n                  onChange={event => {\n                    formState.setFieldValue(\'jjcdNum\', event.target.value)\n                    formState.setFieldValue(\n                      \'jjcd\',\n                      event.target.selectedOptions[0].label,\n                    )\n                  }}\n                >\n                  <option value="001">急</option>\n                  <option value="002">特急</option>\n                  <option value="003">限时</option>\n                  <option value="004">特提</option>\n                </select>\n              )\n            }}\n          />\n        </div>\n        <FormValueMonitor>\n          {values => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(t={props:N,DefaultLayout:i.a,Playground:r.c,useFormState:u.a,FormValueMonitor:b.a,useField:m.a,useFieldValue:c.a,FormStateContext:p.a,Field:d.a,CustomFormFieldDemo:s.a,CustomCheckboxGroupDemo:j.a},t.DefaultLayout=i.a,t._frontmatter=O,t),mdxType:"Playground"},(function(){var e=Object(u.a)({jjcdNum:"002"});return Object(l.b)(p.a.Provider,{value:e},Object(l.b)("form",null,Object(l.b)("div",null,Object(l.b)("label",null,"公文标题"),Object(l.b)(d.a,{as:"input",name:"title",mdxType:"Field"})),Object(l.b)("div",null,Object(l.b)("label",null,"紧急程度"),Object(l.b)(d.a,{name:"jjcdNum",render:function(e){var n=e.formState,t=e.fieldProps;return Object(l.b)("select",Object(a.a)({},t,{style:{width:160},onChange:function(e){n.setFieldValue("jjcdNum",e.target.value),n.setFieldValue("jjcd",e.target.selectedOptions[0].label)}}),Object(l.b)("option",{value:"001"},"急"),Object(l.b)("option",{value:"002"},"特急"),Object(l.b)("option",{value:"003"},"限时"),Object(l.b)("option",{value:"004"},"特提"))},mdxType:"Field"})),Object(l.b)(b.a,{mdxType:"FormValueMonitor"},(function(e){return Object(l.b)("div",null,"表单值：",JSON.stringify(e,void 0,2))}))))})),Object(l.b)("h2",{id:"值提取"},"值提取"),Object(l.b)("p",null,"Field 组件内置了从表单域组件值变化事件（ ",Object(l.b)("inlineCode",{parentName:"p"},"event")," ）中提取表单域值的默认规则："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"如果 ",Object(l.b)("inlineCode",{parentName:"li"},"event")," 是事件类型，则表单域值为 ",Object(l.b)("inlineCode",{parentName:"li"},"event.target.value"),"；"),Object(l.b)("li",{parentName:"ul"},"否则认为 ",Object(l.b)("inlineCode",{parentName:"li"},"event")," 是表单域的值。")),Object(l.b)("p",null,"内置的默认值提取规则满足大部分需求，但是如果有定制需求的话，则可以使用 ",Object(l.b)("inlineCode",{parentName:"p"},"valueExtract")," 属性自定义值提取规则。如下多选复选框组组件："),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"TimeInput.tsx")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\n\nexport default function TimeInput({\n  value = '00:00',\n  onChange,\n}: {\n  onChange: (hour: string, minute: string) => void;\n  value?: string;\n}) {\n  const [hour, minute] = value.split(':');\n\n  return (\n    <div>\n      <label>\n        <input\n          value={hour}\n          onChange={(event) => {\n            onChange(event.target.value, minute);\n          }}\n        />\n        h\n      </label>\n      <label>\n        <input\n          value={minute}\n          onChange={(event) => {\n            onChange(hour, event.target.value);\n          }}\n        />\n        m\n      </label>\n    </div>\n  );\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"TimeInputField.tsx")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport TimeInput from './TimeInput';\n\nexport default function TimeInputField(props) {\n  return (\n    <Field\n      {...props}\n      as={TimeInput}\n      valueExtract={(hour, minute) => `${hour}:${minute}`}\n    />\n  );\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"CustomFormFieldDemo.tsx")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport { useFormState, FormStateContext, Field } from '@sinoui/rx-form-state';\nimport TimeInputField from './TimeInputField';\n\nfunction CustomFormFieldDemo() {\n  const formState = useFormState();\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>开始时间</label>\n          <TimeInputField name=\"startTime\" />\n        </div>\n        <div>\n          <label>结束时间</label>\n          <TimeInputField name=\"endTime\" />\n        </div>\n        <FormValueMonitor>\n          {(values) => <div>表单值：{JSON.stringify(values)}</div>}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(l.b)("p",null,"运行效果："),Object(l.b)(r.c,{__position:2,__code:"<CustomFormFieldDemo />",__scope:(f={props:N,DefaultLayout:i.a,Playground:r.c,useFormState:u.a,FormValueMonitor:b.a,useField:m.a,useFieldValue:c.a,FormStateContext:p.a,Field:d.a,CustomFormFieldDemo:s.a,CustomCheckboxGroupDemo:j.a},f.DefaultLayout=i.a,f._frontmatter=O,f),mdxType:"Playground"},Object(l.b)(s.a,{mdxType:"CustomFormFieldDemo"})),Object(l.b)("h2",{id:"值格式化"},"值格式化"),Object(l.b)("p",null,"如果 ",Object(l.b)("inlineCode",{parentName:"p"},"Field")," 从 ",Object(l.b)("inlineCode",{parentName:"p"},"formState")," 中提取的表单域值类型与表单域 ",Object(l.b)("inlineCode",{parentName:"p"},"as")," 组件的值类型不匹配，则可以通过 ",Object(l.b)("inlineCode",{parentName:"p"},"valueFormat")," 属性指定值格式化器，将表单中的值转换成 ",Object(l.b)("inlineCode",{parentName:"p"},"as")," 组件可以使用的值。如，复选框组组件，我们期望在表单状态中存储的值是字符串类型的，如：",Object(l.b)("inlineCode",{parentName:"p"},"'篮球,足球'"),"，但是复选框组组件只接收数组类型的值。"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"CheckboxGroup.tsx"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nexport interface Props {\n  items: { value: string; label: string }[];\n  value?: string[];\n  onChange: (value: string[]) => void;\n}\n\nfunction CheckboxGroup(props: Props) {\n  const { items, value = [], onChange } = props;\n\n  const handleCheckboxChange = (checkboxValue: string) => {\n    const idx = value.indexOf(checkboxValue);\n    if (!onChange) {\n      return;\n    }\n    if (idx === -1) {\n      onChange([...value, checkboxValue]);\n    } else {\n      onChange([...value.slice(0, idx), ...value.slice(idx + 1)]);\n    }\n  };\n\n  return (\n    <div>\n      {items.map((item) => (\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={value && value.includes(item.value)}\n            onChange={() => handleCheckboxChange(item.value)}\n          />\n          {item.label}\n        </label>\n      ))}\n    </div>\n  );\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"CheckboxGroupField.tsx"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"function valueExtract(value: string[]) {\n  return value.join(',');\n}\n\nfunction valueFormat(value: string) {\n  return value.split(',');\n}\n\nfunction CheckboxGroupField({\n  name,\n  items,\n}: {\n  name: string;\n  items: { value: string; label: string }[];\n}) {\n  return (\n    <Field<CheckboxGroupProps, string, string[]>\n      name={name}\n      as={CheckboxGroup}\n      valueExtract={valueExtract}\n      valueFormat={valueFormat}\n      items={items}\n    />\n  );\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"CheckboxGroupFieldDemo.tsx"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {\n  useFormState,\n  FormStateContext,\n  FormValueMonitor,\n} from '@sinoui/rx-form-state';\nimport CheckboxGroupField from './CheckboxGroupField';\n\nconst items = ['足球', '篮球', '排球', '乒乓球'].map((item) => ({\n  value: item,\n  label: item,\n}));\nfunction CheckboxGroupFieldDemo() {\n  const formState = useFormState({ fav: '足球,篮球' });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <CheckboxGroupField items={items} name=\"fav\" />\n      <FormValueMonitor path=\"fav\">\n        {(fav) => <div>fav值: {fav}</div>}\n      </FormValueMonitor>\n    </FormStateContext.Provider>\n  );\n}\n")),Object(l.b)("p",null,"运行效果："),Object(l.b)(r.c,{__position:3,__code:"<CustomCheckboxGroupDemo />",__scope:(C={props:N,DefaultLayout:i.a,Playground:r.c,useFormState:u.a,FormValueMonitor:b.a,useField:m.a,useFieldValue:c.a,FormStateContext:p.a,Field:d.a,CustomFormFieldDemo:s.a,CustomCheckboxGroupDemo:j.a},C.DefaultLayout=i.a,C._frontmatter=O,C),mdxType:"Playground"},Object(l.b)(j.a,{mdxType:"CustomCheckboxGroupDemo"})))}void 0!==f&&f&&f===Object(f)&&Object.isExtensible(f)&&!f.hasOwnProperty("__filemeta")&&Object.defineProperty(f,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/custom-field.mdx"}}),f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-custom-field-mdx-97f290e54814bdd3db60.js.map