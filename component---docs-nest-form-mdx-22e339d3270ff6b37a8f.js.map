{"version":3,"sources":["webpack:///../docs/nest-form.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","set","useFieldArray","useFormState","FormValueMonitor","Field","FormStateContext","TelephoneForm","TopContactsForm","RelyFieldsInNestForm","formState","Provider","value","as","name","required","values","JSON","stringify","undefined","type","validateTelephone","errors","telephone","length","validateTopContact","topContact","userName","telephones","map","validate","topContacts","relys","draft","count","placeholder","isMDXComponent"],"mappings":"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","file":"component---docs-nest-form-mdx-22e339d3270ff6b37a8f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/workspace/rx-form-state/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { set } from 'lodash';\nimport { useFieldArray, useFormState, FormValueMonitor, Field, FormStateContext } from '../src';\nimport TelephoneForm from './src/TelephoneForm';\nimport TopContactsForm from './src/TopContactsForm';\nimport RelyFieldsInNestForm from './src/RelyFieldsInNestForm';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"嵌套表单\"\n    }}>{`嵌套表单`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sinoui/rx-form-state\"\n      }}>{`@sinoui/rx-form-state`}</a>{`的表单域`}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`属性支持\n`}<a parentName=\"p\" {...{\n        \"href\": \"http://jsonpath.com/\"\n      }}>{`JsonPath`}</a>{`形式，以支持嵌套表单的场景。如：`}</p>\n    <p>{`表单值数据：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"address\": {\n    \"city\": \"北京\",\n    \"street\": \"海淀\"\n  }\n}\n`}</code></pre>\n    <p>{`地址相关的两个表单项：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Field name=\"address.city\" />\n<Field name=\"address.street\" />\n`}</code></pre>\n    <p>{`列表类型嵌套表单的数据结构：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"contacts\": [\n    {\n      \"userName\": \"张三\",\n      \"telephone\": \"13443565678\"\n    },\n    {\n      \"userName\": \"李四\",\n      \"telephone\": \"13312341234\"\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`我们可以这样定义表单域：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`第一个联系人：\n<Field name=\"contacts[0].userName\" />\n<Field name=\"contacts[0].telephone\" />\n\n第二个联系人：\n<Field name=\"contacts[1].userName\" />\n<Field name=\"contacts[1].telephone\" />\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/sinoui/rx-form-state\"\n      }}>{`@sinoui/rx-form-state`}</a>{`\n还提供了`}<a parentName=\"p\" {...{\n        \"href\": \"api-use-field-array\"\n      }}>{`useFieldArray`}</a>{`和`}<a parentName=\"p\" {...{\n        \"href\": \"api-field-array-component\"\n      }}>{`FieldArray`}</a>{`辅助嵌套表单的开发。`}</p>\n    <p>{`本篇教程我们主要以以下三种嵌套表单为例，阐述不同场景嵌套表单的实现方式：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`简单的嵌套表单 -- 填写地址`}</li>\n      <li parentName=\"ul\">{`列表类型的嵌套 -- 添加联系人`}</li>\n      <li parentName=\"ul\">{`深层嵌套 -- 添加常用联系人`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"简单的嵌套表单\"\n    }}>{`简单的嵌套表单`}</h2>\n    <p>{`简单的嵌套表单不需要过多复杂的处理，只需要指定正确的`}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`值即可。`}</p>\n    <p>{`基本用法：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  useFormState,\n  FormStateContext,\n  Field,\n  FormValueMonitor,\n} from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form formState={formState}>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" name=\"userName\" required />\n        </div>\n        <label>地址：</label>\n        <div>\n          <label>城市</label>\n          <Field as=\"input\" name=\"address.city\" required />\n        </div>\n        <div>\n          <label>区/县</label>\n          <Field as=\"input\" name=\"address.region\" required />\n        </div>\n        <div>\n          <label>街道</label>\n          <Field as=\"input\" name=\"address.street\" required />\n        </div>\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={0} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form formState={formState}>\\n        <div>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" name=\\\"userName\\\" required />\\n        </div>\\n        <label>地址：</label>\\n        <div>\\n          <label>城市</label>\\n          <Field as=\\\"input\\\" name=\\\"address.city\\\" required />\\n        </div>\\n        <div>\\n          <label>区/县</label>\\n          <Field as=\\\"input\\\" name=\\\"address.region\\\" required />\\n        </div>\\n        <div>\\n          <label>街道</label>\\n          <Field as=\\\"input\\\" name=\\\"address.street\\\" required />\\n        </div>\\n        <FormValueMonitor>\\n          {values => (\\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form formState={formState}>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" name=\"userName\" required mdxType=\"Field\" />\n          </div>\n          <label>地址：</label>\n          <div>\n            <label>城市</label>\n            <Field as=\"input\" name=\"address.city\" required mdxType=\"Field\" />\n          </div>\n          <div>\n            <label>区/县</label>\n            <Field as=\"input\" name=\"address.region\" required mdxType=\"Field\" />\n          </div>\n          <div>\n            <label>街道</label>\n            <Field as=\"input\" name=\"address.street\" required mdxType=\"Field\" />\n          </div>\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>表单值：{JSON.stringify(values, undefined, 2)}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"列表类型的嵌套表单\"\n    }}>{`列表类型的嵌套表单`}</h2>\n    <p>{`可以借助`}<a parentName=\"p\" {...{\n        \"href\": \"use-field-array\"\n      }}>{`useFieldArray`}</a>{`实现列表类型的嵌套表单，我们以添加联系方式为例来说明列表类型的嵌套列表应该如何实现：`}</p>\n    <p><inlineCode parentName=\"p\">{`TelephoneForm.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { Field, useFieldArray } from '@sinoui/rx-form-state';\n\nconst types = ['家庭', '工作', 'iPhone', '手机', '主要', '工作传真', '其他'];\n\nfunction TelephoneForm() {\n  const {\n    getFieldName: name, // 获取表单域名称\n    items, // 列表数据项\n    insert, // 插入一条新的数据\n    remove, // 移除一条数据\n    push, // 在数据项最后新增一条数据\n    swap, // 移动数据项\n  } = useFieldArray('telephones');\n\n  const handlePush = () => {\n    if (items.length < types.length) {\n      const idx = types.findIndex(\n        (type) => items.findIndex((item: any) => item.type === type) === -1,\n      );\n      if (idx !== -1) {\n        push({ type: types[idx] });\n      }\n    } else {\n      push({ type: '其他' });\n    }\n  };\n\n  const handleInsert = (index: number) => {\n    if (items.length < types.length) {\n      const idx = types.findIndex(\n        (type) => items.findIndex((item: any) => item.type === type) === -1,\n      );\n      if (idx !== -1) {\n        insert(index + 1, { type: types[idx] });\n      }\n    } else {\n      insert(index + 1, { type: '其他' });\n    }\n  };\n\n  return (\n    <div style={{ paddingTop: 16, paddingBottom: 16 }}>\n      <label> 添加电话</label>\n      {items.map((_telephone, index) => (\n        <div\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n          style={{\n            display: 'flex',\n            padding: 8,\n            border: '1px solid green',\n            marginTop: 8,\n            marginBottom: 8,\n          }}\n        >\n          <div>\n            <Field\n              name={name(index, 'type')}\n              as=\"input\"\n              required\n              placeholder=\"类型\"\n            />\n          </div>\n          <div>\n            <Field\n              name={name(index, 'telephone')}\n              as=\"input\"\n              required\n              maxLength={11}\n              minLength={4}\n              placeholder=\"电话\"\n            />\n          </div>\n          <button type=\"button\" onClick={() => handleInsert(index)}>\n            +\n          </button>\n          <button type=\"button\" onClick={() => remove(index)}>\n            -\n          </button>\n          {index > 0 && (\n            <button type=\"button\" onClick={() => swap(index, index - 1)}>\n              ⬆️\n            </button>\n          )}\n          {index < items.length - 1 && (\n            <button type=\"button\" onClick={() => swap(index, index + 1)}>\n              ⬇️\n            </button>\n          )}\n        </div>\n      ))}\n      <button type=\"button\" onClick={handlePush}>\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default TelephoneForm;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`FormDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { Field, useFormState, FormStateContext } from '@sinoui/rx-form-state';\nimport TelephoneForm from './TelephoneForm';\n\nfunction FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>姓氏</label>\n          <Field as=\"input\" type=\"text\" name=\"firstName\" required />\n        </div>\n        <div>\n          <label>名字</label>\n          <Field as=\"input\" type=\"text\" name=\"lastName\" required />\n        </div>\n        <div>\n          <label>公司</label>\n          <Field as=\"input\" type=\"text\" name=\"company\" />\n        </div>\n\n        <TelephoneForm />\n        <div>\n          <label>备注</label>\n          <Field as=\"input\" name=\"note\" />\n        </div>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`上述示例的数据结构为：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"company\": \"\",\n  \"telephones\": [{ \"type\": \"\", \"telephone\": \"\" }],\n  \"note\": \"\"\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={1} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>姓氏</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"firstName\\\" required />\\n        </div>\\n        <div>\\n          <label>名字</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"lastName\\\" required />\\n        </div>\\n        <div>\\n          <label>公司</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"company\\\" />\\n        </div>\\n        <TelephoneForm />\\n        <div>\\n          <label>备注</label>\\n          <Field as=\\\"input\\\" name=\\\"note\\\" />\\n        </div>\\n        <FormValueMonitor>\\n          {values => (\\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>姓氏</label>\n            <Field as=\"input\" type=\"text\" name=\"firstName\" required mdxType=\"Field\" />\n          </div>\n          <div>\n            <label>名字</label>\n            <Field as=\"input\" type=\"text\" name=\"lastName\" required mdxType=\"Field\" />\n          </div>\n          <div>\n            <label>公司</label>\n            <Field as=\"input\" type=\"text\" name=\"company\" mdxType=\"Field\" />\n          </div>\n          <TelephoneForm mdxType=\"TelephoneForm\" />\n          <div>\n            <label>备注</label>\n            <Field as=\"input\" name=\"note\" mdxType=\"Field\" />\n          </div>\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>表单值：{JSON.stringify(values, undefined, 2)}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"深层嵌套\"\n    }}>{`深层嵌套`}</h2>\n    <p>{`深层嵌套表单的实现过程中，我们可能需要多次使用`}<inlineCode parentName=\"p\">{`useFieldArray`}</inlineCode>{`，此时需要特别注意参数的指定。`}</p>\n    <p>{`添加常用联系人的数据结构如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"userName\": \"\",\n  \"topContacts\": [\n    {\n      \"userName\": \"\",\n      \"telephones\": [{ \"type\": \"\", \"telephone\": \"138xxxx0015\" }]\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`分析上述数据结构，我们要维护常用联系人以及联系人的联系方式，需要创建两层嵌套表单，分别是：联系人表单（TopContactsForm）和联系方式表单（TelephoneForm）。\n我们可以使用两次`}<inlineCode parentName=\"p\">{`useFieldArray`}</inlineCode>{`来实现。具体如下：`}</p>\n    <p><inlineCode parentName=\"p\">{`TopContactsForm.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from 'react';\nimport { useFieldArray, Field } from '../../src';\nimport TelephoneForm from './TelephoneForm';\n\nfunction FormInner(props: any) {\n  const { name, index, insert, remove, swap, itemsLength } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: 8,\n        border: '1px solid green',\n        margin: 8,\n      }}\n    >\n      <div>\n        <Field\n          name={name(index, 'userName')}\n          as=\"input\"\n          required\n          placeholder=\"姓名\"\n        />\n      </div>\n      <TelephoneForm parentName={\\`topContacts[\\${index}]\\`} />\n      <button type=\"button\" onClick={() => insert(index + 1, {})}>\n        +\n      </button>\n      <button type=\"button\" onClick={() => remove(index)}>\n        -\n      </button>\n      {index > 0 && (\n        <button type=\"button\" onClick={() => swap(index, index - 1)}>\n          ⬆️\n        </button>\n      )}\n      {index < itemsLength - 1 && (\n        <button type=\"button\" onClick={() => swap(index, index + 1)}>\n          ⬇️\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst Item = React.memo(FormInner);\n\nfunction TopContactsForm() {\n  const {\n    getFieldName: name,\n    items,\n    insert,\n    remove,\n    push,\n    swap,\n  } = useFieldArray('topContacts');\n\n  return (\n    <div style={{ paddingTop: 16, paddingBottom: 16 }}>\n      <label>添加常用联系人</label>\n      {items.map((_telephone, index) => (\n        <Item\n          key={index}\n          index={index}\n          name={name}\n          itemsLength={items.length}\n          insert={insert}\n          remove={remove}\n          swap={swap}\n        />\n      ))}\n      <button type=\"button\" onClick={() => push({})}>\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default TopContactsForm;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`TelephoneForm.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/* eslint-disable jsx-a11y/label-has-for */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { useFieldArray, Field } from '../../src';\n\nconst types = ['家庭', '工作', 'iPhone', '手机', '主要', '工作传真', '其他'];\n\nfunction FormInner(props: any) {\n  const { name, index, handleInsert, remove, swap, itemsLength } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: 8,\n        border: '1px solid green',\n        marginTop: 8,\n        marginBottom: 8,\n      }}\n    >\n      <div>\n        <Field\n          name={name(index, 'type')}\n          as=\"input\"\n          required\n          placeholder=\"类型\"\n        />\n      </div>\n      <div>\n        <Field\n          name={name(index, 'telephone')}\n          as=\"input\"\n          required\n          maxLength={11}\n          minLength={4}\n          placeholder=\"电话\"\n        />\n      </div>\n      <button type=\"button\" onClick={() => handleInsert(index)}>\n        +\n      </button>\n      <button type=\"button\" onClick={() => remove(index)}>\n        -\n      </button>\n      {index > 0 && (\n        <button type=\"button\" onClick={() => swap(index, index - 1)}>\n          ⬆️\n        </button>\n      )}\n      {index < itemsLength - 1 && (\n        <button type=\"button\" onClick={() => swap(index, index + 1)}>\n          ⬇️\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst Item = React.memo(FormInner);\n\nfunction TelephoneForm(props: { parentName?: string }) {\n  const { parentName } = props;\n\n  const {\n    getFieldName: name,\n    items,\n    insert,\n    remove,\n    push,\n    swap,\n  } = useFieldArray(parentName ? \\`\\${parentName}.telephones\\` : 'telephones');\n  const itemsRef = useRef(items);\n  useEffect(() => {\n    itemsRef.current = items;\n  }, [items]);\n\n  const handlePush = () => {\n    if (items.length < types.length) {\n      const idx = types.findIndex(\n        (type) => items.findIndex((item: any) => item.type === type) === -1,\n      );\n      if (idx !== -1) {\n        push({ type: types[idx] });\n      }\n    } else {\n      push({ type: '其他' });\n    }\n  };\n\n  const handleInsert = useCallback(\n    (index: number) => {\n      if (itemsRef.current.length < types.length) {\n        const idx = types.findIndex(\n          (type) =>\n            itemsRef.current.findIndex((item: any) => item.type === type) ===\n            -1,\n        );\n        if (idx !== -1) {\n          insert(index + 1, { type: types[idx] });\n        }\n      } else {\n        insert(index + 1, { type: '其他' });\n      }\n    },\n    [insert],\n  );\n\n  return (\n    <div style={{ paddingTop: 4, paddingBottom: 4 }}>\n      <label> 添加电话</label>\n      {items.map((_telephone, index) => (\n        <Item\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n          index={index}\n          itemsLength={items.length}\n          name={name}\n          remove={remove}\n          swap={swap}\n          handleInsert={handleInsert}\n        />\n      ))}\n      <button type=\"button\" onClick={() => handlePush()}>\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default TelephoneForm;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`FormDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { Field, useFormState, FormStateContext } from '@sinoui/rx-form-state';\nimport TopContactsForm from './TopContactsForm';\n\nfunction FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" required />\n        </div>\n        <TopContactsForm />\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={2} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"userName\\\" required />\\n        </div>\\n        <TopContactsForm />\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" type=\"text\" name=\"userName\" required mdxType=\"Field\" />\n          </div>\n          <TopContactsForm mdxType=\"TopContactsForm\" />\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"嵌套表单的性能优化建议\"\n    }}>{`嵌套表单的性能优化建议`}</h2>\n    <p>{`对于复杂的嵌套表单，我们要特别注意其性能优化。比如列表类型的嵌套表单，我们在改变其中一条记录的数据时，理想状态是只有当前的这条数据记录相关组件重新渲染。\n此时，我们只需要把相关组件使用`}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{`渲染即可。具体使用可参照`}<a parentName=\"p\" {...{\n        \"href\": \"#%E6%B7%B1%E5%B1%82%E5%B5%8C%E5%A5%97\"\n      }}>{`深层嵌套`}</a>{`。\n更多关于组件性能优化方式可参考`}<a parentName=\"p\" {...{\n        \"href\": \"https://sinoui.github.io/sinoui-guide/docs/react-performance-optimization\"\n      }}>{`React 组件性能优化`}</a>{`。`}</p>\n    <h2 {...{\n      \"id\": \"嵌套表单的全局校验\"\n    }}>{`嵌套表单的全局校验`}</h2>\n    <p>{`简单嵌套表单的全局校验只需要注意其返回值的数据结构，具体事例可参考`}<a parentName=\"p\" {...{\n        \"href\": \"form-validate#%E5%B5%8C%E5%A5%97%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C\"\n      }}>{`嵌套表单校验`}</a>{`;\n列表类型的嵌套表单在做全局校验时，建议拆分校验函数，而非在一个校验函数中写大段的逻辑处理，例如上述`}<a parentName=\"p\" {...{\n        \"href\": \"#%E6%B7%B1%E5%B1%82%E5%B5%8C%E5%A5%97\"\n      }}>{`深层嵌套表单`}</a>{`的全局校验函数我们使用下面的方式定义：`}</p>\n    <p><inlineCode parentName=\"p\">{`FormDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 联系方式校验\n */\nfunction validateTelephone(value) {\n  const errors = {};\n  if (value.telephone && value.telephone.length < 4) {\n    errors.telephone = '不能少于4位';\n  }\n\n  return errors;\n}\n\n/**\n * 常用联系人校验\n */\nfunction validateTopContact(topContact) {\n  const errors = {};\n  if (!topContact.userName) {\n    errors.userName = '必填';\n  }\n\n  if (topContact.telephones) {\n    errors.telephones = topContact.telephones.map(validateTelephone);\n  }\n\n  return errors;\n}\n\nfunction validate(values) {\n  let errors = {};\n  if (!values.userName) {\n    errors.userName = '必填';\n  }\n\n  if (values.topContacts) {\n    errors.topContacts = values.topContacts.map(validateTopContact);\n  }\n  return errors;\n}\n\nfunction FormDemo() {\n  const formState = useFormState({}, { validate });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={3} __code={'() => {\\n  /**\\n   * 联系方式校验\\n   */\\n  function validateTelephone(value) {\\n    const errors = {}\\n    if (value.telephone && value.telephone.length < 4) {\\n      errors.telephone = \\'不能少于4位\\'\\n    }\\n    return errors\\n  }\\n  /**\\n   * 常用联系人校验\\n   */\\n  function validateTopContact(topContact) {\\n    const errors = {}\\n    if (!topContact.userName) {\\n      errors.userName = \\'必填\\'\\n    }\\n    if (topContact.telephones) {\\n      errors.telephones = topContact.telephones.map(validateTelephone)\\n    }\\n    return errors\\n  }\\n  function validate(values) {\\n    let errors = {}\\n    if (!values.userName) {\\n      errors.userName = \\'必填\\'\\n    }\\n    if (values.topContacts) {\\n      errors.topContacts = values.topContacts.map(validateTopContact)\\n    }\\n    return errors\\n  }\\n  const formState = useFormState({}, { validate })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"userName\\\" />\\n        </div>\\n        <TopContactsForm />\\n        <FormValueMonitor>\\n          {values => (\\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        /**\n         * 联系方式校验\n         */\n        function validateTelephone(value) {\n          const errors = {};\n\n          if (value.telephone && value.telephone.length < 4) {\n            errors.telephone = '不能少于4位';\n          }\n\n          return errors;\n        }\n        /**\n         * 常用联系人校验\n         */\n\n\n        function validateTopContact(topContact) {\n          const errors = {};\n\n          if (!topContact.userName) {\n            errors.userName = '必填';\n          }\n\n          if (topContact.telephones) {\n            errors.telephones = topContact.telephones.map(validateTelephone);\n          }\n\n          return errors;\n        }\n\n        function validate(values) {\n          let errors = {};\n\n          if (!values.userName) {\n            errors.userName = '必填';\n          }\n\n          if (values.topContacts) {\n            errors.topContacts = values.topContacts.map(validateTopContact);\n          }\n\n          return errors;\n        }\n\n        const formState = useFormState({}, {\n          validate\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" type=\"text\" name=\"userName\" mdxType=\"Field\" />\n          </div>\n          <TopContactsForm mdxType=\"TopContactsForm\" />\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>表单值：{JSON.stringify(values, undefined, 2)}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"表单域值关联\"\n    }}>{`表单域值关联`}</h2>\n    <p>{`嵌套表单的表单域值关联，跟普通表单的表单域值关联处理方式基本一致。\n只是依赖函数在处理值的时候需要特别注意一下，例如调整上述的联系人示例，\n有三个表单域，分别是：姓氏、名字和姓名，它们之间存在一种关系：`}<inlineCode parentName=\"p\">{`姓名 = 姓氏 + 名字`}</inlineCode>{`。`}</p>\n    <p>{`数据结构：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"topContacts\": [\n    {\n      \"firstName\": \"张\",\n      \"lastName\": \"三\",\n      \"userName\": \"张三\"\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`表单域的定义如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Field\n    name={name(index, 'firstName')}\n    as=\"input\"\n    required\n    placeholder=\"姓氏\"\n/>\n<Field\n    name={name(index, 'lastName')}\n    as=\"input\"\n    required\n    placeholder=\"名字\"\n/>\n<Field\n    name={name(index, 'userName')}\n    as=\"input\"\n    required\n    placeholder=\"姓名\"\n    readOnly\n    relyFields={[name(index, 'firstName'), name(index, 'lastName')]}\n    relyFn={(values) => relyFn(values, index)}\n/>\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`relyFn`}</inlineCode>{`函数的定义如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`/**\n * 计算值的依赖函数  这里需要也别注意值处理，如果层次特别深的话，建议使用lodash的get方法\n */\nconst relyFn = (values, index) => {\n  if (values.topContacts) {\n    const { firstName = '', lastName = '' } = values.topContacts[index];\n    return \\`\\${firstName}\\${lastName}\\`;\n  }\n  return '';\n};\n`}</code></pre>\n    <p>{`完整示例如下：`}</p>\n    <p><inlineCode parentName=\"p\">{`TopContactsForm.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport {\n  Field,\n  useFieldArray,\n  useFormState,\n  FormValueMonitor,\n  FormStateContext,\n} from '@sinoui/rx-form-state';\nimport TelephoneForm from './TelephoneForm';\n/**\n * 计算值的依赖函数  这里需要也别注意值处理，如果层次特别深的话，建议使用lodash的get方法\n */\nconst relyFn = (values, index) => {\n  if (values.topContacts) {\n    const { firstName = '', lastName = '' } = values.topContacts[index];\n    return \\`\\${firstName}\\${lastName}\\`;\n  }\n  return '';\n};\n\nfunction FormInner(props: any) {\n  const { name, index, insert, remove, swap, itemsLength } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        padding: 8,\n        border: '1px solid green',\n        margin: 8,\n      }}\n    >\n      <div>\n        <Field\n          name={name(index, 'firstName')}\n          as=\"input\"\n          required\n          placeholder=\"姓氏\"\n        />\n      </div>\n      <div>\n        <Field\n          name={name(index, 'lastName')}\n          as=\"input\"\n          required\n          placeholder=\"名字\"\n        />\n      </div>\n      <div>\n        <Field\n          name={name(index, 'userName')}\n          as=\"input\"\n          required\n          placeholder=\"姓名\"\n          readOnly\n          relyFields={[name(index, 'firstName'), name(index, 'lastName')]}\n          relyFn={(values) => relyFn(values, index)}\n        />\n      </div>\n      <TelephoneForm parentName={\\`topContacts[\\${index}]\\`} />\n      <button type=\"button\" onClick={() => insert(index + 1, {})}>\n        +\n      </button>\n      <button type=\"button\" onClick={() => remove(index)}>\n        -\n      </button>\n      {index > 0 && (\n        <button type=\"button\" onClick={() => swap(index, index - 1)}>\n          ⬆️\n        </button>\n      )}\n      {index < itemsLength - 1 && (\n        <button type=\"button\" onClick={() => swap(index, index + 1)}>\n          ⬇️\n        </button>\n      )}\n    </div>\n  );\n}\n\nconst Item = React.memo(FormInner);\n\nfunction TopContactsForm() {\n  const {\n    getFieldName: name,\n    items,\n    insert,\n    remove,\n    push,\n    swap,\n  } = useFieldArray('topContacts');\n\n  return (\n    <div style={{ paddingTop: 16, paddingBottom: 16 }}>\n      <label>添加常用联系人</label>\n      {items.map((_telephone, index) => (\n        <Item\n          key={index}\n          index={index}\n          name={name}\n          itemsLength={items.length}\n          insert={insert}\n          remove={remove}\n          swap={swap}\n        />\n      ))}\n      <button type=\"button\" onClick={() => push({})}>\n        +\n      </button>\n    </div>\n  );\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`FormDemo.tsx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function FormDemo() {\n  const formState = useFormState();\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" name=\"userName\" required />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={4} __code={'() => <RelyFieldsInNestForm />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">{() => <RelyFieldsInNestForm mdxType=\"RelyFieldsInNestForm\" />}</Playground>\n    <h2 {...{\n      \"id\": \"全局值关联\"\n    }}>{`全局值关联`}</h2>\n    <p>{`这里我们依旧采用深层嵌套表单的示例来说明全局值关联的使用。`}</p>\n    <p>{`假设现在我们需要存储一个字段来表示常用联系人总数，此时我们需要定义一个全局依赖规则，并将这个依赖规则作为`}<inlineCode parentName=\"p\">{`useFormState`}</inlineCode>{`的第二个参数对象的`}<inlineCode parentName=\"p\">{`relys`}</inlineCode>{`属性。具体实现如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const countRely = [\n  'topContacts',\n  (draft) => {\n    if (draft.topContacts) {\n      draft.count = draft.topContacts.length;\n    }\n  },\n];\n\nfunction FormDemo() {\n  const formState = useFormState({}, { relys: [countRely] });\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" />\n        </div>\n        <TopContactsForm />\n        <div>\n          <label>常用联系人总数</label>\n          <Field\n            as=\"input\"\n            type=\"number\"\n            name=\"count\"\n            placeholder=\"常用联系人总数\"\n          />\n        </div>\n        <FormValueMonitor>\n          {(values) => (\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={5} __code={'() => {\\n  const countRely = [\\n    \\'topContacts\\',\\n    draft => {\\n      if (draft.topContacts) {\\n        draft.count = draft.topContacts.length\\n      }\\n    },\\n  ]\\n  const formState = useFormState({}, { relys: [countRely] })\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"userName\\\" />\\n        </div>\\n        <TopContactsForm />\\n        <div>\\n          <label>常用联系人总数</label>\\n          <Field\\n            as=\\\"input\\\"\\n            type=\\\"number\\\"\\n            name=\\\"count\\\"\\n            placeholder=\\\"常用联系人总数\\\"\\n          />\\n        </div>\\n        <FormValueMonitor>\\n          {values => (\\n            <div>表单值：{JSON.stringify(values, undefined, 2)}</div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const countRely = ['topContacts', draft => {\n          if (draft.topContacts) {\n            draft.count = draft.topContacts.length;\n          }\n        }];\n        const formState = useFormState({}, {\n          relys: [countRely]\n        });\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" type=\"text\" name=\"userName\" mdxType=\"Field\" />\n          </div>\n          <TopContactsForm mdxType=\"TopContactsForm\" />\n          <div>\n            <label>常用联系人总数</label>\n            <Field as=\"input\" type=\"number\" name=\"count\" placeholder=\"常用联系人总数\" mdxType=\"Field\" />\n          </div>\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>表单值：{JSON.stringify(values, undefined, 2)}</div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n    <p>{`如果上述示例中的联系人总数不需要存储，只是用来展示统计结果的话，我们不需要使用全局值关联，只需要借助`}<inlineCode parentName=\"p\">{`FormValueMonitor`}</inlineCode>{`即可实现，具体如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function FormDemo() {\n  const formState = useFormState();\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form>\n        <div>\n          <label>用户名</label>\n          <Field as=\"input\" type=\"text\" name=\"userName\" />\n        </div>\n        <TopContactsForm />\n        <FormValueMonitor>\n          {(values) => (\n            <div>\n              常用联系人总数：{values.topContacts && values.topContacts.length}\n            </div>\n          )}\n        </FormValueMonitor>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n`}</code></pre>\n    <p>{`运行效果：`}</p>\n    <Playground __position={6} __code={'() => {\\n  const formState = useFormState()\\n  return (\\n    <FormStateContext.Provider value={formState}>\\n      <form>\\n        <div>\\n          <label>用户名</label>\\n          <Field as=\\\"input\\\" type=\\\"text\\\" name=\\\"userName\\\" />\\n        </div>\\n        <TopContactsForm />\\n        <FormValueMonitor>\\n          {values => (\\n            <div>\\n              常用联系人总数：\\n              {values.topContacts && values.topContacts.length}\\n            </div>\\n          )}\\n        </FormValueMonitor>\\n      </form>\\n    </FormStateContext.Provider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      set,\n      useFieldArray,\n      useFormState,\n      FormValueMonitor,\n      Field,\n      FormStateContext,\n      TelephoneForm,\n      TopContactsForm,\n      RelyFieldsInNestForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const formState = useFormState();\n        return <FormStateContext.Provider value={formState}>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" type=\"text\" name=\"userName\" mdxType=\"Field\" />\n          </div>\n          <TopContactsForm mdxType=\"TopContactsForm\" />\n          <FormValueMonitor mdxType=\"FormValueMonitor\">\n            {values => <div>\n                常用联系人总数：\n                {values.topContacts && values.topContacts.length}\n              </div>}\n          </FormValueMonitor>\n        </form>\n      </FormStateContext.Provider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}