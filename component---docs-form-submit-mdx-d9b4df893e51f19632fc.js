(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{l22e:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return f}));var o=n("Fcif"),i=n("+I+c"),r=(n("mXGw"),n("/FXl")),a=n("TjRS"),u=n("ZFoC"),b=n("xIpy"),l=n("xHIp"),m=n("IUht"),s=n("hh+d"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/form-submit.mdx"}});var d={_frontmatter:c},p=a.a;function f(e){var t,n,f,j=e.components,O=Object(i.a)(e,["components"]);return Object(r.b)(p,Object(o.a)({},d,O,{components:j,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"提交表单"},"提交表单"),Object(r.b)("p",null,"当用户填写完表单后，就需要将表单数据提交到后端服务以存储表单数据。提交过程分成三部分："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"在提交表单前，我们应该先对表单数据进行校验，验证表单是否填写完整了。"),Object(r.b)("li",{parentName:"ul"},"在提交表单过程中，应该出现提交中的提示语。而且需要防止用户重复提交。"),Object(r.b)("li",{parentName:"ul"},"提交完成后，如果提交失败，且后端返回了表单的错误信息，我们需要在表单域上显示表单错误。")),Object(r.b)("p",null,"接下来，我们看看如何使用",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/sinoui/rx-form-state"}),"@sinoui/rx-form-state"),"来完成表单提交。"),Object(r.b)("h2",{id:"提交表单-1"},"提交表单"),Object(r.b)("p",null,"要想提交表单，我们需要准备两个步骤："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"在",Object(r.b)("inlineCode",{parentName:"li"},"useFormState"),"的配置参数中添加",Object(r.b)("inlineCode",{parentName:"li"},"onSubmit"),"，定义向后端提交表单值的逻辑。"),Object(r.b)("li",{parentName:"ul"},"在",Object(r.b)("inlineCode",{parentName:"li"},"<form>"),"标签中添加一个",Object(r.b)("inlineCode",{parentName:"li"},'type="submit"'),"的表单提交按钮。当点击这个按钮时，就会执行表单提交动作。")),Object(r.b)("p",null,"如下所示："),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import { useFormState, Field, FormStateContext } from \'@sinoui/rx-form-state\';\n\nconst onSubmit = (values) => {\n  // 使用setTimeout模拟向后端提交表单。\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n      alert(\'提交表单成功\');\n    }, 1000);\n  });\n};\n\nfunction FormDemo() {\n  const formState = useFormState(undefined, {\n    onSubmit,\n  });\n\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          formState.submit();\n        }}\n      >\n        <div>\n          <label>用户名</label>\n          <Field as="input" name="userName" required />\n        </div>\n        <div>\n          <label>性别</label>\n          <Field as="select" name="sex" required>\n            <option value="">请选择</option>\n            <option value="女">女</option>\n            <option value="男">男</option>\n          </Field>\n        </div>\n        <button type="submit">提交表单</button>\n      </form>\n    </FormStateContext.Provider>\n  );\n}\n')),Object(r.b)("p",null,"可以从",Object(r.b)("inlineCode",{parentName:"p"},"formState"),"中获取",Object(r.b)("inlineCode",{parentName:"p"},"isSubmitting"),"状态，表示是否正在提交表单。我们可以通过这个状态控制“提交表单”按钮的可用性以及提交中提示语，如下所示："),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"import { useFormSubmitting } from '@sinoui/rx-form-state';\n\nfunction FormDemo() {\n  const isSubmitting = useFormSubmitting(formState);\n\n  return (\n    <button type=\"submit\" disabled={isSubmitting}>\n      {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n    </button>\n  );\n}\n")),Object(r.b)("p",null,"演示效果如下："),Object(r.b)(u.c,{__position:0,__code:'() => {\n  const onSubmit = values => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve()\n        alert(\'提交表单成功\')\n      }, 1000)\n    })\n  }\n  const formState = useFormState(undefined, {\n    onSubmit,\n  })\n  const isSubmitting = useFormSubmitting(formState)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <form\n        onSubmit={event => {\n          event.preventDefault()\n          formState.submit()\n        }}\n      >\n        <div>\n          <label>用户名</label>\n          <Field as="input" name="userName" required />\n        </div>\n        <div>\n          <label>性别</label>\n          <Field as="select" name="sex" required>\n            <option value="">请选择</option>\n            <option value="女">女</option>\n            <option value="男">男</option>\n          </Field>\n        </div>\n        <button type="submit" disabled={isSubmitting}>\n          {isSubmitting ? \'正在提交表单，请稍等...\' : \'提交表单\'}\n        </button>\n      </form>\n    </FormStateContext.Provider>\n  )\n}',__scope:(t={props:O,DefaultLayout:a.a,Playground:u.c,useFormState:b.a,useFormSubmitting:l.a,FormStateContext:m.a,Field:s.a},t.DefaultLayout=a.a,t._frontmatter=c,t),mdxType:"Playground"},(function(){var e=Object(b.a)(void 0,{onSubmit:function(e){return new Promise((function(e){setTimeout((function(){e(),alert("提交表单成功")}),1e3)}))}}),t=Object(l.a)(e);return Object(r.b)(m.a.Provider,{value:e},Object(r.b)("form",{onSubmit:function(t){t.preventDefault(),e.submit()}},Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(s.a,{as:"input",name:"userName",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"性别"),Object(r.b)(s.a,{as:"select",name:"sex",required:!0,mdxType:"Field"},Object(r.b)("option",{value:""},"请选择"),Object(r.b)("option",{value:"女"},"女"),Object(r.b)("option",{value:"男"},"男"))),Object(r.b)("button",{type:"submit",disabled:t},t?"正在提交表单，请稍等...":"提交表单")))})),Object(r.b)("h2",{id:"提交按钮在form标签外部"},"提交按钮在",Object(r.b)("inlineCode",{parentName:"h2"},"<form>"),"标签外部"),Object(r.b)("p",null,"如果提交表单的按钮在",Object(r.b)("inlineCode",{parentName:"p"},"<form />"),"标签外部，我们可以在点击提交表单按钮时，调用",Object(r.b)("inlineCode",{parentName:"p"},"formState"),"的",Object(r.b)("inlineCode",{parentName:"p"},"submit"),"方法，来完成表单提交。以上一章节的例子为例："),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"function FormDemo() {\n  return (\n    <div>\n      <form>...</form>\n      <button type=\"button\" disabled={isSubmitting} onClick={formState.submit}>\n        {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n      </button>\n    </div>\n  );\n}\n")),Object(r.b)("p",null,"演示效果如下："),Object(r.b)(u.c,{__position:1,__code:'() => {\n  const onSubmit = values => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve()\n        alert(\'提交表单成功\')\n      }, 1000)\n    })\n  }\n  const formState = useFormState(undefined, {\n    onSubmit,\n  })\n  const isSubmitting = useFormSubmitting(formState)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <div>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as="input" name="userName" required />\n          </div>\n          <div>\n            <label>性别</label>\n            <Field as="select" name="sex" required>\n              <option value="">请选择</option>\n              <option value="女">女</option>\n              <option value="男">男</option>\n            </Field>\n          </div>\n        </form>\n        <button disabled={isSubmitting} onClick={formState.submit}>\n          {isSubmitting ? \'正在提交表单，请稍等...\' : \'提交表单\'}\n        </button>\n      </div>\n    </FormStateContext.Provider>\n  )\n}',__scope:(n={props:O,DefaultLayout:a.a,Playground:u.c,useFormState:b.a,useFormSubmitting:l.a,FormStateContext:m.a,Field:s.a},n.DefaultLayout=a.a,n._frontmatter=c,n),mdxType:"Playground"},(function(){var e=Object(b.a)(void 0,{onSubmit:function(e){return new Promise((function(e){setTimeout((function(){e(),alert("提交表单成功")}),1e3)}))}}),t=Object(l.a)(e);return Object(r.b)(m.a.Provider,{value:e},Object(r.b)("div",null,Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(s.a,{as:"input",name:"userName",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"性别"),Object(r.b)(s.a,{as:"select",name:"sex",required:!0,mdxType:"Field"},Object(r.b)("option",{value:""},"请选择"),Object(r.b)("option",{value:"女"},"女"),Object(r.b)("option",{value:"男"},"男")))),Object(r.b)("button",{disabled:t,onClick:e.submit},t?"正在提交表单，请稍等...":"提交表单")))})),Object(r.b)("h2",{id:"应用表单提交返回的验证错误"},"应用表单提交返回的验证错误"),Object(r.b)("p",null,"如果表单提交失败，后台返回了表单验证错误，我们是需要将这些表单验证错误在表单上显示出来的。"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"function submitForm(values) {\n  // 使用setTimeout模拟向后端提交表单。\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject({\n        userName: '用户名已存在',\n        sex: '性别不匹配',\n      });\n      alert('提交表单失败');\n    }, 1000);\n  });\n}\n\nconst onSubmit = async (values, formState) => {\n  try {\n    await submitForm(values);\n  } catch (errors) {\n    console.log(errors); // { userName: '用户名已存在', sex: '性别不匹配' }\n    formState.setAsyncErrors(errors);\n    throw errors;\n  }\n};\n\nfunction FormDemo() {\n  const fromState = useFormState(undefined, { onSubmit });\n}\n")),Object(r.b)("p",null,"演示效果如下："),Object(r.b)(u.c,{__position:2,__code:"() => {\n  function submitForm(values) {\n    // 使用setTimeout模拟向后端提交表单。\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject({\n          userName: '用户名已存在',\n          sex: '性别不匹配',\n        })\n        alert('提交表单失败')\n      }, 1000)\n    })\n  }\n  const onSubmit = (values, formState) => {\n    return submitForm(values).catch(errors => {\n      console.log(errors) // { userName: '用户名已存在', sex: '性别不匹配' }\n      formState.setAsyncErrors(errors)\n      throw errors\n    })\n  }\n  const formState = useFormState(undefined, {\n    onSubmit,\n  })\n  const isSubmitting = useFormSubmitting(formState)\n  return (\n    <FormStateContext.Provider value={formState}>\n      <div>\n        <form>\n          <div>\n            <label>用户名</label>\n            <Field as=\"input\" name=\"userName\" required />\n          </div>\n          <div>\n            <label>性别</label>\n            <Field as=\"select\" name=\"sex\" required>\n              <option value=\"\">请选择</option>\n              <option value=\"女\">女</option>\n              <option value=\"男\">男</option>\n            </Field>\n          </div>\n        </form>\n        <button disabled={isSubmitting} onClick={formState.submit}>\n          {isSubmitting ? '正在提交表单，请稍等...' : '提交表单'}\n        </button>\n      </div>\n    </FormStateContext.Provider>\n  )\n}",__scope:(f={props:O,DefaultLayout:a.a,Playground:u.c,useFormState:b.a,useFormSubmitting:l.a,FormStateContext:m.a,Field:s.a},f.DefaultLayout=a.a,f._frontmatter=c,f),mdxType:"Playground"},(function(){var e=Object(b.a)(void 0,{onSubmit:function(e,t){return new Promise((function(e,t){setTimeout((function(){t({userName:"用户名已存在",sex:"性别不匹配"}),alert("提交表单失败")}),1e3)})).catch((function(e){throw console.log(e),t.setAsyncErrors(e),e}))}}),t=Object(l.a)(e);return Object(r.b)(m.a.Provider,{value:e},Object(r.b)("div",null,Object(r.b)("form",null,Object(r.b)("div",null,Object(r.b)("label",null,"用户名"),Object(r.b)(s.a,{as:"input",name:"userName",required:!0,mdxType:"Field"})),Object(r.b)("div",null,Object(r.b)("label",null,"性别"),Object(r.b)(s.a,{as:"select",name:"sex",required:!0,mdxType:"Field"},Object(r.b)("option",{value:""},"请选择"),Object(r.b)("option",{value:"女"},"女"),Object(r.b)("option",{value:"男"},"男")))),Object(r.b)("button",{disabled:t,onClick:e.submit},t?"正在提交表单，请稍等...":"提交表单")))})),Object(r.b)("h2",{id:"消息提示"},"消息提示"),Object(r.b)("p",null,"可以用 ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://sinoui.github.io/message/"}),"@sinoui/message"),"，添加一些必要的表单提交提示。范例："),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"import message from '@sinoui/message';\n\nfunction FormDemo() {\n  const formState = useFormState(initialValues, { onSubmit });\n\n  const handleFormSubmit = async () => {\n    const hide = message.loading('正在提交表单', 0);\n    try {\n      await form.submit();\n      message.success('表单提交成功');\n    } catch (e) {\n      if (e && e.message === '表单校验失败') {\n        // 表单校验出错\n        message.error('表单填写不完整');\n      } else {\n        message.error('表单提交失败');\n      }\n    } finally {\n      hide(); // 隐藏 “正在提交表单” 提示\n    }\n  };\n\n  return (\n    <form formState={formState}>\n      ...\n      <button onClick={handleFormSubmit}>提交表单</button>\n    </form>\n  );\n}\n")))}void 0!==f&&f&&f===Object(f)&&Object.isExtensible(f)&&!f.hasOwnProperty("__filemeta")&&Object.defineProperty(f,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/form-submit.mdx"}}),f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-form-submit-mdx-d9b4df893e51f19632fc.js.map